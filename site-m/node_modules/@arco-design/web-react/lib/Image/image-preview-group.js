"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var useIsFirstRender_1 = __importDefault(require("../_util/hooks/useIsFirstRender"));
var useMergeValue_1 = __importDefault(require("../_util/hooks/useMergeValue"));
var image_preview_1 = __importDefault(require("./image-preview"));
var previewGroupContext_1 = require("./previewGroupContext");
function PreviewGroup(props, ref) {
    var children = props.children, srcList = props.srcList, infinite = props.infinite, propCurrentIndex = props.current, defaultCurrent = props.defaultCurrent, onChange = props.onChange, propVisible = props.visible, defaultVisible = props.defaultVisible, onVisibleChange = props.onVisibleChange, restProps = __rest(props, ["children", "srcList", "infinite", "current", "defaultCurrent", "onChange", "visible", "defaultVisible", "onVisibleChange"]);
    var _a = __read((0, useMergeValue_1.default)(false, {
        value: propVisible,
        defaultValue: defaultVisible,
    }), 2), visible = _a[0], setVisible = _a[1];
    var propPreviewUrlMap = (0, react_1.useMemo)(function () { return (srcList ? new Map(srcList.map(function (url, index) { return [index, { url: url, preview: true }]; })) : null); }, [srcList]);
    var isFirstRender = (0, useIsFirstRender_1.default)();
    var getPreviewUrlMap = function () { return (propPreviewUrlMap ? new Map(propPreviewUrlMap) : new Map()); };
    var _b = __read((0, react_1.useState)(getPreviewUrlMap()), 2), previewUrlMap = _b[0], setPreviewUrlMap = _b[1];
    (0, react_1.useEffect)(function () {
        if (isFirstRender)
            return;
        setPreviewUrlMap(getPreviewUrlMap());
    }, [propPreviewUrlMap]);
    var previewIdList = Array.from(previewUrlMap.keys());
    var canPreviewUrlMap = new Map(Array.from(previewUrlMap)
        .filter(function (_a) {
        var _b = __read(_a, 2), preview = _b[1].preview;
        return preview;
    })
        .map(function (_a) {
        var _b = __read(_a, 2), id = _b[0], url = _b[1].url;
        return [id, url];
    }));
    var _c = __read((0, useMergeValue_1.default)(0, {
        value: propCurrentIndex,
        defaultValue: defaultCurrent,
    }), 2), currentIndex = _c[0], setCurrentIndex = _c[1];
    var currentId = (0, react_1.useMemo)(function () { return previewIdList[currentIndex]; }, [previewIdList, currentIndex]);
    var setCurrentId = (0, react_1.useCallback)(function (nextId) {
        var nextIndex = previewIdList.indexOf(nextId);
        if (nextIndex !== currentIndex) {
            setCurrentIndex(nextIndex);
            onChange && onChange(nextIndex);
        }
    }, [previewIdList, currentIndex]);
    function registerPreviewUrl(id, url, preview) {
        if (!propPreviewUrlMap) {
            setPreviewUrlMap(function (pre) {
                return new Map(pre).set(id, {
                    url: url,
                    preview: preview,
                });
            });
        }
        return function unRegisterPreviewUrl() {
            if (!propPreviewUrlMap) {
                setPreviewUrlMap(function (pre) {
                    var cloneMap = new Map(pre);
                    var hasDelete = cloneMap.delete(id);
                    return hasDelete ? cloneMap : pre;
                });
            }
        };
    }
    var refPreview = (0, react_1.useRef)();
    (0, react_1.useImperativeHandle)(ref, function () { return ({
        reset: function () {
            refPreview.current && refPreview.current.reset();
        },
    }); });
    var handleVisibleChange = function (visible, preVisible) {
        setVisible(visible);
        onVisibleChange && onVisibleChange(visible, preVisible);
    };
    return (react_1.default.createElement(previewGroupContext_1.PreviewGroupContext.Provider, { value: {
            previewGroup: true,
            previewUrlMap: canPreviewUrlMap,
            infinite: infinite,
            currentId: currentId,
            setCurrentId: setCurrentId,
            setPreviewUrlMap: setPreviewUrlMap,
            registerPreviewUrl: registerPreviewUrl,
            visible: visible,
            setVisible: setVisible,
        } },
        children,
        react_1.default.createElement(image_preview_1.default, __assign({ ref: refPreview, src: "", visible: visible, onVisibleChange: handleVisibleChange }, restProps))));
}
var PreviewGroupComponent = (0, react_1.forwardRef)(PreviewGroup);
PreviewGroupComponent.displayName = 'ImagePreviewGroup';
exports.default = PreviewGroupComponent;
