"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var classNames_1 = __importDefault(require("../_util/classNames"));
var keycode_1 = require("../_util/keycode");
var autoSizeTextAreaHeight_1 = __importDefault(require("./autoSizeTextAreaHeight"));
var omit_1 = __importDefault(require("../_util/omit"));
var ConfigProvider_1 = require("../ConfigProvider");
var input_1 = require("./input");
var useMergeValue_1 = __importDefault(require("../_util/hooks/useMergeValue"));
var IconClose_1 = __importDefault(require("../../icon/react-icon-cjs/IconClose"));
var icon_hover_1 = __importDefault(require("../_class/icon-hover"));
var is_1 = require("../_util/is");
var TextArea = function (props, ref) {
    var _a, _b, _c;
    var className = props.className, style = props.style, wrapperStyle = props.wrapperStyle, placeholder = props.placeholder, disabled = props.disabled, error = props.error, maxLength = props.maxLength, showWordLimit = props.showWordLimit, allowClear = props.allowClear, onClear = props.onClear, rest = __rest(props, ["className", "style", "wrapperStyle", "placeholder", "disabled", "error", "maxLength", "showWordLimit", "allowClear", "onClear"]);
    var trueMaxLength = (0, is_1.isObject)(maxLength) ? maxLength.length : maxLength;
    var mergedMaxLength = (0, is_1.isObject)(maxLength) && maxLength.errorOnly ? undefined : trueMaxLength;
    var isComposition = (0, react_1.useRef)(false);
    var textareaRef = (0, react_1.useRef)();
    var _d = __read((0, react_1.useState)(''), 2), compositionValue = _d[0], setCompositionValue = _d[1];
    var _e = __read((0, react_1.useState)({}), 2), textAreaStyle = _e[0], setTextAreaStyle = _e[1];
    var _f = __read((0, useMergeValue_1.default)('', {
        defaultValue: 'defaultValue' in props ? (0, input_1.formatValue)(props.defaultValue, mergedMaxLength) : undefined,
        value: 'value' in props ? (0, input_1.formatValue)(props.value, mergedMaxLength) : undefined,
    }), 2), value = _f[0], setValue = _f[1];
    var getPrefixCls = (0, react_1.useContext)(ConfigProvider_1.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('textarea');
    if (disabled) {
        textAreaStyle.resize = 'none';
    }
    var handleChangeValue = function (value, e) {
        var onChange = props.onChange;
        if (!('value' in props)) {
            setValue(value);
        }
        onChange && onChange(value, e);
    };
    var handleChange = function (e) {
        var newValue = e.currentTarget.value;
        if (!isComposition.current) {
            if (mergedMaxLength) {
                if (newValue.length <= trueMaxLength) {
                    handleChangeValue(newValue, e);
                }
            }
            else {
                handleChangeValue(newValue, e);
            }
        }
        else {
            setCompositionValue(newValue);
        }
    };
    var onComposition = function (e) {
        if (e.type === 'compositionend') {
            isComposition.current = false;
            setCompositionValue(undefined);
            handleChangeValue(e.target.value, e);
        }
        else {
            isComposition.current = true;
        }
    };
    var resizeTextAreaHeight = function () {
        var textAreaStyle = (0, autoSizeTextAreaHeight_1.default)(props.autoSize, textareaRef.current);
        if (textAreaStyle) {
            setTextAreaStyle(textAreaStyle);
        }
    };
    var handleClearClick = function (e) {
        e.stopPropagation();
        if (textareaRef.current && textareaRef.current.focus) {
            textareaRef.current.focus();
        }
        handleChangeValue('', e);
        onClear && onClear();
    };
    (0, react_1.useLayoutEffect)(function () {
        resizeTextAreaHeight();
    }, [value]);
    (0, react_1.useImperativeHandle)(ref, function () { return ({
        dom: textareaRef.current,
        focus: function () {
            textareaRef.current && textareaRef.current.focus && textareaRef.current.focus();
        },
        blur: function () {
            textareaRef.current && textareaRef.current.blur && textareaRef.current.blur();
        },
    }); }, []);
    var valueLength = value ? value.length : 0;
    var withWrapper = (trueMaxLength && showWordLimit) || allowClear;
    var lengthError = (0, react_1.useMemo)(function () {
        if (!mergedMaxLength && trueMaxLength) {
            return valueLength > trueMaxLength;
        }
        return false;
    }, [valueLength, trueMaxLength, mergedMaxLength]);
    var classNames = (0, classNames_1.default)(prefixCls, (_a = {},
        _a[prefixCls + "-error"] = error || lengthError,
        _a[prefixCls + "-disabled"] = disabled,
        _a), className);
    var TextAreaElement = (react_1.default.createElement("textarea", __assign({}, (0, omit_1.default)(rest, ['autoSize', 'defaultValue', 'onPressEnter']), { maxLength: mergedMaxLength, ref: textareaRef, style: __assign(__assign({}, style), textAreaStyle), className: classNames, placeholder: placeholder, disabled: disabled, onChange: handleChange, onKeyDown: function (e) {
            var onKeyDown = props.onKeyDown, onPressEnter = props.onPressEnter;
            var keyCode = e.keyCode || e.which;
            onKeyDown && onKeyDown(e);
            if (keyCode === keycode_1.Enter.code) {
                onPressEnter && onPressEnter(e);
            }
        }, onCompositionStart: onComposition, onCompositionUpdate: onComposition, onCompositionEnd: onComposition, value: compositionValue || value || '' })));
    if (withWrapper) {
        var showClearIcon = !disabled && allowClear && value;
        return (react_1.default.createElement("div", { className: (0, classNames_1.default)(prefixCls + "-wrapper", (_b = {},
                _b[prefixCls + "-clear-wrapper"] = allowClear,
                _b)), style: wrapperStyle },
            TextAreaElement,
            showClearIcon ? (react_1.default.createElement(icon_hover_1.default, { className: prefixCls + "-clear-icon" },
                react_1.default.createElement(IconClose_1.default, { onClick: handleClearClick, 
                    // keep focus status
                    onMouseDown: function (e) {
                        e.preventDefault();
                    } }))) : null,
            trueMaxLength && showWordLimit && (react_1.default.createElement("span", { className: (0, classNames_1.default)(prefixCls + "-word-limit", (_c = {},
                    _c[prefixCls + "-word-limit-error"] = lengthError,
                    _c)) },
                valueLength,
                "/",
                trueMaxLength))));
    }
    return TextAreaElement;
};
var TextAreaRef = react_1.default.forwardRef(TextArea);
TextAreaRef.displayName = 'TextArea';
exports.default = TextAreaRef;
