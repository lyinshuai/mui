"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSyntheticEvent = exports.iterativelyGetKeys = exports.set = exports.cloneDeep = void 0;
var cloneDeepWith_1 = __importDefault(require("lodash/cloneDeepWith"));
var set_1 = __importDefault(require("lodash/set"));
var is_1 = require("../_util/is");
function cloneDeep(value) {
    // 只有对象才执行拷贝，否则直接返回。 如果是 File，MouseEvent对象，都可以直接返回
    return (0, cloneDeepWith_1.default)(value, function (val) {
        if (!(0, is_1.isObject)(val) && !(0, is_1.isArray)(val)) {
            return val;
        }
    });
}
exports.cloneDeep = cloneDeep;
function set(target, field, value) {
    (0, set_1.default)(target, field, cloneDeep(value));
    return target;
}
exports.set = set;
// iteratively get all keys of object including nested objects
// e.g. const myObj = { a: { b: { c: [1,2] } } }
// iterativelyGetKeys(myObj) returns ['a.b.0.c.0', 'a.b.0.c.1']
// reference https://stackoverflow.com/a/47063174
function iterativelyGetKeys(obj, prefix) {
    if (prefix === void 0) { prefix = ''; }
    if (!obj) {
        return [];
    }
    return Object.keys(obj).reduce(function (res, el) {
        if (typeof obj[el] === 'object' && obj[el] !== null) {
            return __spreadArray(__spreadArray([], __read(res), false), __read(iterativelyGetKeys(obj[el], prefix + el + ".")), false);
        }
        return __spreadArray(__spreadArray([], __read(res), false), [prefix + el], false);
    }, []);
}
exports.iterativelyGetKeys = iterativelyGetKeys;
// 判断是否是个事件对象 e?.constructor?.name 可能不是 SyntheticEvent，跟业务项目的打包方式有关系
function isSyntheticEvent(e) {
    var _a;
    return ((_a = e === null || e === void 0 ? void 0 : e.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'SyntheticEvent' || (e === null || e === void 0 ? void 0 : e.nativeEvent) instanceof Event;
}
exports.isSyntheticEvent = isSyntheticEvent;
