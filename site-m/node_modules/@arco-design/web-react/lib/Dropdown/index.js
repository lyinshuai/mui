"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var Trigger_1 = __importStar(require("../Trigger"));
var button_1 = __importDefault(require("./button"));
var ConfigProvider_1 = require("../ConfigProvider");
var classNames_1 = __importDefault(require("../_util/classNames"));
var useMergeValue_1 = __importDefault(require("../_util/hooks/useMergeValue"));
var omit_1 = __importDefault(require("../_util/omit"));
var pick_1 = __importDefault(require("../_util/pick"));
var useMergeProps_1 = __importDefault(require("../_util/hooks/useMergeProps"));
var defaultProps = {
    position: 'bl',
    trigger: 'hover',
    unmountOnExit: true,
};
function Dropdown(baseProps, _) {
    var _a;
    var _b = (0, react_1.useContext)(ConfigProvider_1.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, useMergeProps_1.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Button);
    var trigger = props.trigger, droplist = props.droplist, children = props.children, position = props.position, disabled = props.disabled, unmountOnExit = props.unmountOnExit, triggerProps = props.triggerProps, getPopupContainer = props.getPopupContainer, onVisibleChange = props.onVisibleChange, rest = __rest(props, ["trigger", "droplist", "children", "position", "disabled", "unmountOnExit", "triggerProps", "getPopupContainer", "onVisibleChange"]);
    var prefixCls = getPrefixCls('dropdown');
    var triggerRef = (0, react_1.useRef)(null);
    var _c = __read((0, useMergeValue_1.default)(false, {
        defaultValue: props.defaultPopupVisible,
        value: props.popupVisible,
    }), 2), popupVisible = _c[0], setPopupVisible = _c[1];
    var getPopupContent = function () {
        return react_1.default.Children.only(droplist || react_1.default.createElement("span", null));
    };
    var changePopupVisible = function (visible) {
        setPopupVisible(visible);
        onVisibleChange && onVisibleChange(visible);
        triggerProps && triggerProps.onVisibleChange && triggerProps.onVisibleChange(visible);
    };
    var handleVisibleChange = function (visible) {
        if (visible !== popupVisible) {
            changePopupVisible(visible);
        }
    };
    var renderPopup = function () {
        var content = getPopupContent();
        return content && content.props.isMenu
            ? react_1.default.cloneElement(content, {
                prefixCls: prefixCls + "-menu",
                inDropdown: true,
                selectable: false,
                onClickMenuItem: function (key, event) {
                    // Trigger onClickMenuItem first
                    var content = getPopupContent();
                    content.props.onClickMenuItem && content.props.onClickMenuItem(key, event);
                    // Set focus to avoid onblur
                    var child = triggerRef.current && triggerRef.current.getRootElement();
                    child && child.focus && child.focus();
                    // Trigger onVisibleChange. Outer component can determine whether to change the state based on the current visibility value.
                    changePopupVisible(false);
                },
            })
            : content;
    };
    return (react_1.default.createElement(Trigger_1.default, __assign({ ref: function (ref) { return (triggerRef.current = ref); }, classNames: "slideDynamicOrigin", trigger: trigger, popup: renderPopup, mouseEnterDelay: 400, mouseLeaveDelay: 400, disabled: disabled, unmountOnExit: unmountOnExit, position: position, popupVisible: popupVisible, popupAlign: {
            left: 4,
            right: 4,
            top: 4,
            bottom: 4,
        }, getPopupContainer: getPopupContainer, alignPoint: trigger === 'contextMenu' }, (0, pick_1.default)(rest, Trigger_1.EventsByTriggerNeed), (0, omit_1.default)(triggerProps, ['onVisibleChange']), { onVisibleChange: handleVisibleChange }), react_1.default.isValidElement(children)
        ? react_1.default.cloneElement(children, {
            disabled: disabled,
            className: (0, classNames_1.default)((_a = {},
                _a[prefixCls + "-popup-visible"] = popupVisible,
                _a), children.props.className),
        })
        : children));
}
var ForwardRefDropdown = react_1.default.forwardRef(Dropdown);
var DropdownComponent = ForwardRefDropdown;
DropdownComponent.displayName = 'Dropdown';
DropdownComponent.Button = button_1.default;
exports.default = DropdownComponent;
