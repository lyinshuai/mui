"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var classNames_1 = __importDefault(require("../_util/classNames"));
var Button_1 = __importDefault(require("../Button"));
var IconUpload_1 = __importDefault(require("../../icon/react-icon-cjs/IconUpload"));
var IconPlus_1 = __importDefault(require("../../icon/react-icon-cjs/IconPlus"));
var ConfigProvider_1 = require("../ConfigProvider");
var is_1 = require("../_util/is");
var dom_1 = require("../_util/dom");
var isAcceptFile = function (file, accept) {
    if (accept && file) {
        var accepts = (0, is_1.isArray)(accept)
            ? accept
            : accept
                .split(',')
                .map(function (x) { return x.trim(); })
                .filter(function (x) { return x; });
        var fileExtension_1 = file.name.indexOf('.') > -1 ? file.name.split('.').pop() : '';
        return accepts.some(function (type) {
            var text = type && type.toLowerCase();
            var fileType = (file.type || '').toLowerCase();
            if (text === fileType) {
                // 类似excel文件这种
                // 比如application/vnd.ms-excel和application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
                // 本身就带有.字符的，不能走下面的.jpg等文件扩展名判断处理
                // 所以优先对比input的accept类型和文件对象的type值
                return true;
            }
            if (/\/\*/.test(text)) {
                // image/* 这种通配的形式处理
                return fileType.replace(/\/.*$/, '') === text.replace(/\/.*$/, '');
            }
            if (/\..*/.test(text)) {
                // .jpg 等后缀名
                return text === "." + (fileExtension_1 && fileExtension_1.toLowerCase());
            }
            return false;
        });
    }
    return !!file;
};
var getFiles = function (fileList, accept) {
    if (!fileList) {
        return;
    }
    var files = [].slice.call(fileList);
    if (accept) {
        files = files.filter(function (file) {
            return isAcceptFile(file, accept);
        });
    }
    return files;
};
var loopDirectory = function (items, accept, callback) {
    var _loopDirectory = function (item) {
        if (item.isFile) {
            item.file(function (file) {
                if (isAcceptFile(file, accept)) {
                    Object.defineProperty(file, 'webkitRelativePath', {
                        value: item.fullPath.replace(/^\//, ''),
                    });
                    callback(file);
                }
            });
        }
        else if (item.isDirectory) {
            // item 是个文件夹
            var reader = item.createReader();
            reader.readEntries(function (entries) {
                entries.forEach(_loopDirectory);
            });
        }
    };
    [].slice
        .call(items)
        .forEach(function (item) { return item.webkitGetAsEntry && _loopDirectory(item.webkitGetAsEntry()); });
};
var TriggerNode = function (props) {
    var _a, _b;
    var locale = (0, react_1.useContext)(ConfigProvider_1.ConfigContext).locale;
    var _c = __read((0, react_1.useState)(false), 2), isDraging = _c[0], setIsDraging = _c[1];
    var nodeRef = (0, react_1.useRef)();
    var tip = props.tip, children = props.children, disabled = props.disabled, drag = props.drag, listType = props.listType, prefixCls = props.prefixCls, accept = props.accept, multiple = props.multiple;
    var nodeProps = {
        disabled: disabled,
    };
    var onDragOver = function (e) {
        e.preventDefault();
        if (!disabled && !isDraging) {
            setIsDraging(true);
        }
    };
    if (children === null) {
        return null;
    }
    return (react_1.default.createElement("div", { ref: nodeRef, className: prefixCls + "-trigger", onClick: disabled ? undefined : props.onClick, onDrop: function (e) {
            e.preventDefault();
            if (!disabled) {
                setIsDraging(false);
                if (props.directory) {
                    loopDirectory(e.dataTransfer.items, accept, function (file) {
                        props.onDragFiles && props.onDragFiles([file]);
                    });
                }
                else {
                    var files = getFiles(e.dataTransfer.files, accept);
                    props.onDragFiles && props.onDragFiles(multiple ? files : files.slice(0, 1));
                }
            }
        }, onDragLeave: function (e) {
            e.preventDefault();
            if (!nodeRef.current || !(0, dom_1.contains)(nodeRef.current, e.target)) {
                setIsDraging(false);
            }
        }, onDragOver: onDragOver }, react_1.default.isValidElement(children) ? (react_1.default.createElement("div", { className: (0, classNames_1.default)((_a = {}, _a[prefixCls + "-trigger-custom-active"] = isDraging, _a)) }, react_1.default.cloneElement(children, nodeProps))) : listType === 'picture-card' ? (react_1.default.createElement("div", { className: prefixCls + "-trigger-picture-wrapper" },
        react_1.default.createElement("div", { className: prefixCls + "-trigger-picture" },
            react_1.default.createElement("div", { className: prefixCls + "-trigger-picture-text" },
                react_1.default.createElement(IconPlus_1.default, null))),
        tip && react_1.default.createElement("div", { className: prefixCls + "-trigger-tip" }, tip))) : drag ? (react_1.default.createElement("div", { draggable: false, className: (0, classNames_1.default)(prefixCls + "-trigger-drag", (_b = {},
            _b[prefixCls + "-trigger-drag-active"] = isDraging,
            _b)) },
        react_1.default.createElement(IconPlus_1.default, null),
        react_1.default.createElement("p", { className: prefixCls + "-trigger-drag-text" }, isDraging ? locale.Upload.dragHover : locale.Upload.drag),
        tip && react_1.default.createElement("div", { className: prefixCls + "-trigger-tip" }, tip))) : (react_1.default.createElement(Button_1.default, __assign({}, nodeProps, { type: "primary", className: prefixCls + "-trigger-with-icon" }),
        react_1.default.createElement(IconUpload_1.default, null),
        locale.Upload.upload))));
};
exports.default = TriggerNode;
