"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var number_precision_1 = require("number-precision");
var button_1 = __importDefault(require("./button"));
var marks_1 = __importDefault(require("./marks"));
var dots_1 = __importDefault(require("./dots"));
var input_1 = __importDefault(require("./input"));
var ticks_1 = __importDefault(require("./ticks"));
var is_1 = require("../_util/is");
var utils_1 = require("./utils");
var classNames_1 = __importDefault(require("../_util/classNames"));
var ConfigProvider_1 = require("../ConfigProvider");
var useMergeValue_1 = __importDefault(require("../_util/hooks/useMergeValue"));
var dom_1 = require("../_util/dom");
var useLegalValue_1 = __importDefault(require("./hooks/useLegalValue"));
var useMergeProps_1 = __importDefault(require("../_util/hooks/useMergeProps"));
function isSameOrder(firstNums, secondNums) {
    var diff1 = firstNums[0] - firstNums[1];
    var diff2 = secondNums[0] - secondNums[1];
    return diff1 <= 0 === diff2 <= 0;
}
var defaultProps = {
    max: 100,
    min: 0,
    step: 1,
};
function Slider(baseProps, ref) {
    var _a, _b, _c;
    var _d = (0, react_1.useContext)(ConfigProvider_1.ConfigContext), getPrefixCls = _d.getPrefixCls, componentConfig = _d.componentConfig;
    var props = (0, useMergeProps_1.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Slider);
    var className = props.className, style = props.style, tooltipVisible = props.tooltipVisible, tooltipPosition = props.tooltipPosition, disabled = props.disabled, min = props.min, max = props.max, propRange = props.range, step = props.step, showTicks = props.showTicks, marks = props.marks, onlyMarkValue = props.onlyMarkValue, vertical = props.vertical, showInput = props.showInput, reverse = props.reverse;
    var range = !!propRange;
    var rangeConfig = (0, is_1.isObject)(propRange) ? __assign({}, propRange) : { draggableBar: false };
    var _e = (0, useLegalValue_1.default)({
        isRange: range,
        min: min,
        max: max,
        onlyMarkValue: onlyMarkValue,
        step: step,
        marks: marks,
    }), getLegalValue = _e.getLegalValue, getLegalRangeValue = _e.getLegalRangeValue, isLegalValue = _e.isLegalValue;
    // 受控与非受控值处理
    var _f = __read((0, useMergeValue_1.default)(range ? [min, min] : min, {
        defaultValue: props.defaultValue,
        value: props.value,
    }), 2), value = _f[0], setValue = _f[1];
    // 计算合法值
    var curVal = getLegalRangeValue(value);
    var lastVal = (0, react_1.useRef)(curVal);
    var _g = __read(curVal, 2), beginVal = _g[0], endVal = _g[1];
    if (!isSameOrder(curVal, lastVal.current)) {
        // 保持顺序
        _a = __read([endVal, beginVal], 2), beginVal = _a[0], endVal = _a[1];
    }
    // 偏移比例
    var beginOffset = (0, utils_1.getOffset)(beginVal, [min, max]);
    var endOffset = (0, utils_1.getOffset)(endVal, [min, max]);
    // 标签数组
    var markList = (0, react_1.useMemo)(function () { return Object.keys(marks || {}).map(function (key) { return ({ key: key, content: marks[key] }); }); }, [marks]);
    // 是否显示输入框
    var isShowInput = showInput && !onlyMarkValue;
    // 样式前缀
    var prefixCls = getPrefixCls('slider');
    // ref
    var roadRef = (0, react_1.useRef)(null);
    var position = (0, react_1.useRef)({
        left: 0,
        height: 0,
        top: 0,
        width: 0,
    });
    var isDragging = (0, react_1.useRef)(false);
    var barStartDragVal = (0, react_1.useRef)(0);
    function getEmitParams(_a) {
        var _b;
        var _c = __read(_a, 2), beginVal = _c[0], endVal = _c[1];
        if (beginVal > endVal) {
            _b = __read([endVal, beginVal], 2), beginVal = _b[0], endVal = _b[1];
        }
        return range ? [beginVal, endVal] : endVal;
    }
    function onChange(val) {
        var _a = __read(val, 2), newBeginVal = _a[0], newEndVal = _a[1];
        newBeginVal = getLegalValue(newBeginVal);
        newEndVal = getLegalValue(newEndVal);
        lastVal.current = [newBeginVal, newEndVal];
        var emitParams = getEmitParams([newBeginVal, newEndVal]);
        setValue(emitParams);
        if ((0, is_1.isFunction)(props.onChange)) {
            props.onChange(emitParams);
        }
    }
    function onMouseUp() {
        if ((0, is_1.isFunction)(props.onAfterChange)) {
            var emitParams = getEmitParams(lastVal.current);
            props.onAfterChange(emitParams);
        }
    }
    function inRange(val) {
        var _a;
        var _b = __read([beginVal, endVal], 2), range1 = _b[0], range2 = _b[1];
        if (range1 > range2) {
            _a = __read([range2, range1], 2), range1 = _a[0], range2 = _a[1];
        }
        if (range)
            return val >= range1 && val <= range2;
        return val <= range2;
    }
    // 通过坐标获取值
    function getValueByCoords(x, y) {
        var _a = position.current, left = _a.left, top = _a.top, width = _a.width, height = _a.height;
        var roadLength = width;
        var diff = reverse ? left + width - x : x - left;
        if (vertical) {
            roadLength = height;
            diff = reverse ? y - top : top + height - y;
        }
        diff = diff < 0 ? 0 : diff > roadLength ? roadLength : diff;
        var stepLen = (roadLength * step) / (max - min);
        var steps = Math.round(diff / stepLen);
        return (0, number_precision_1.plus)(min, steps * step);
    }
    function getBarStyle(offsets) {
        var _a, _b, _c;
        var _d = __read(offsets, 2), begin = _d[0], end = _d[1];
        if (begin > end) {
            _a = __read([end, begin], 2), begin = _a[0], end = _a[1];
        }
        var beginOffset = (0, utils_1.formatPercent)(begin);
        var endOffset = (0, utils_1.formatPercent)(1 - end);
        return vertical
            ? (_b = {},
                _b[reverse ? 'top' : 'bottom'] = beginOffset,
                _b[reverse ? 'bottom' : 'top'] = endOffset,
                _b) : (_c = {},
            _c[reverse ? 'right' : 'left'] = beginOffset,
            _c[reverse ? 'left' : 'right'] = endOffset,
            _c);
    }
    function getBtnStyle(offset) {
        var _a, _b;
        return vertical
            ? (_a = {}, _a[reverse ? 'top' : 'bottom'] = (0, utils_1.formatPercent)(offset), _a) : (_b = {}, _b[reverse ? 'right' : 'left'] = (0, utils_1.formatPercent)(offset), _b);
    }
    function getTooltipProps() {
        var tooltipProps = {
            getTooltipContainer: props.getTooltipContainer,
            formatTooltip: props.formatTooltip,
        };
        if ('tooltipPosition' in props) {
            tooltipProps.tooltipPosition = tooltipPosition;
        }
        if ('tooltipVisible' in props) {
            tooltipProps.tooltipVisible = tooltipVisible;
        }
        return tooltipProps;
    }
    function getPosition() {
        position.current = roadRef.current.getBoundingClientRect();
    }
    function onRoadMouseDown(e) {
        getPosition();
        var val = getValueByCoords(e.clientX, e.clientY);
        if (rangeConfig.draggableBar && inRange(val)) {
            barStartDragVal.current = getLegalValue(val);
            (0, dom_1.on)(window, 'mousemove', onBarMouseMove);
            (0, dom_1.on)(window, 'mouseup', onBarMouseUp);
        }
        else {
            handleJumpClick(val);
        }
    }
    // 点击某个位置，快速跳转
    function handleJumpClick(val) {
        if (disabled)
            return;
        var value = getLegalValue(val);
        if (range && endVal - value > value - beginVal) {
            onChange([value, endVal]);
        }
        else {
            onChange([beginVal, value]);
        }
        onMouseUp();
    }
    function handleInputChange(val) {
        onChange(val);
        onMouseUp();
    }
    // 拖动开始节点
    function handleBeginMove(x, y) {
        isDragging.current = true;
        onChange([getValueByCoords(x, y), endVal]);
    }
    // 拖动结束节点
    function handleEndMove(x, y) {
        isDragging.current = true;
        onChange([beginVal, getValueByCoords(x, y)]);
    }
    function handleMoveEnd() {
        isDragging.current = false;
        onMouseUp();
    }
    // bar 移动中
    function onBarMouseMove(e) {
        var newVal = getLegalValue(getValueByCoords(e.clientX, e.clientY));
        var offsetVal = newVal - barStartDragVal.current;
        var newBeginVal = beginVal + offsetVal;
        var newEndVal = endVal + offsetVal;
        if (isLegalValue(newBeginVal) && isLegalValue(newEndVal)) {
            onChange([newBeginVal, newEndVal]);
        }
    }
    // bar 停止移动
    function onBarMouseUp() {
        (0, dom_1.off)(window, 'mousemove', onBarMouseMove);
        (0, dom_1.off)(window, 'mouseup', onBarMouseUp);
        onMouseUp();
    }
    return (react_1.default.createElement("div", { className: (0, classNames_1.default)(prefixCls, (_b = {},
            _b[prefixCls + "-vertical"] = vertical,
            _b[prefixCls + "-with-marks"] = marks,
            _b[prefixCls + "-reverse"] = reverse,
            _b), className), style: style, ref: ref },
        react_1.default.createElement("div", { className: prefixCls + "-wrapper" },
            react_1.default.createElement("div", { ref: roadRef, className: (0, classNames_1.default)(prefixCls + "-road", (_c = {},
                    _c[prefixCls + "-road-disabled"] = disabled,
                    _c[prefixCls + "-road-vertical"] = vertical,
                    _c)), onMouseDown: onRoadMouseDown },
                react_1.default.createElement("div", { className: prefixCls + "-bar", style: getBarStyle([beginOffset, endOffset]) }),
                showTicks && (react_1.default.createElement(ticks_1.default, { step: step, min: min, max: max, value: [beginVal, endVal], prefixCls: prefixCls, vertical: vertical, reverse: reverse })),
                react_1.default.createElement(dots_1.default, { data: markList, min: min, max: max, value: [beginVal, endVal], vertical: vertical, prefixCls: prefixCls, reverse: reverse, onMouseDown: handleJumpClick }),
                react_1.default.createElement(marks_1.default, { data: markList, min: min, max: max, vertical: vertical, prefixCls: prefixCls, reverse: reverse, onMouseDown: handleJumpClick }),
                range && (react_1.default.createElement(button_1.default, __assign({ style: getBtnStyle(beginOffset), disabled: disabled, prefixCls: prefixCls, value: beginVal, vertical: vertical }, getTooltipProps(), { onMoveBegin: getPosition, onMoving: handleBeginMove, onMoveEnd: handleMoveEnd }))),
                react_1.default.createElement(button_1.default, __assign({ style: getBtnStyle(endOffset), disabled: disabled, prefixCls: prefixCls, value: endVal, vertical: vertical }, getTooltipProps(), { onMoveBegin: getPosition, onMoving: handleEndMove, onMoveEnd: handleMoveEnd }))),
            isShowInput && (react_1.default.createElement(input_1.default, { min: min, max: max, step: step, value: [beginVal, endVal], range: range, disabled: disabled, prefixCls: prefixCls, onChange: handleInputChange })))));
}
var SliderComponent = (0, react_1.forwardRef)(Slider);
SliderComponent.displayName = 'Slider';
exports.default = (0, react_1.memo)(SliderComponent);
