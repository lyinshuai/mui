import React from 'react';
import { isArray } from './is';
import cs from './classNames';
export default function getHighlightText(_a) {
    var nodeList = _a.nodeList, pattern = _a.pattern, highlightClassName = _a.highlightClassName;
    if (!pattern) {
        return nodeList;
    }
    var transformNode = function (node) {
        if (node && node.props && typeof node.props.children === 'string') {
            var children_1 = node.props.children;
            return React.cloneElement(node, {
                children: (function () {
                    var indexOfNextRegTest = 0;
                    var result = [];
                    // 首先进行正则查询，将匹配项和匹配项之间的字符串依次拼接
                    children_1.replace(pattern, function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var match = args[0];
                        var index = args[args.length - 2];
                        // 与上次匹配项之间的内容
                        if (index > indexOfNextRegTest) {
                            result.push(children_1.slice(indexOfNextRegTest, index));
                        }
                        // 当前匹配项
                        result.push(React.createElement("span", { key: index, className: cs(highlightClassName) }, match));
                        indexOfNextRegTest = index + match.length;
                    });
                    // 最后将剩余未被匹配的字符串拼接到最后
                    result.push(children_1.slice(indexOfNextRegTest));
                    return result;
                })(),
            });
        }
        return node;
    };
    return isArray(nodeList) ? nodeList.map(function (node) { return transformNode(node); }) : transformNode(nodeList);
}
