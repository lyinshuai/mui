var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React, { Component } from 'react';
import isEqualWith from 'lodash/isEqualWith';
import { Schema } from 'b-validate';
import has from 'lodash/has';
import set from 'lodash/set';
import get from 'lodash/get';
import setWith from 'lodash/setWith';
import { FormItemContext } from './context';
import { isArray, isString, isFunction } from '../_util/is';
import warn from '../_util/warning';
import IconExclamationCircleFill from '../../icon/react-icon/IconExclamationCircleFill';
import IconCloseCircleFill from '../../icon/react-icon/IconCloseCircleFill';
import IconCheckCircleFill from '../../icon/react-icon/IconCheckCircleFill';
import IconLoading from '../../icon/react-icon/IconLoading';
import classNames from '../_util/classNames';
import { isSyntheticEvent } from './utils';
function isFieldMath(field, fields) {
    var fieldObj = setWith({}, field, undefined, Object);
    return fields.some(function (item) { return has(fieldObj, item); });
}
var Control = /** @class */ (function (_super) {
    __extends(Control, _super);
    function Control(props, context) {
        var _this = _super.call(this, props) || this;
        _this.errors = null;
        _this.isDestroyed = false;
        _this.getErrors = function () {
            return _this.errors;
        };
        _this.isTouched = function () {
            return _this.touched;
        };
        _this.hasFieldProps = function () {
            return !!_this.props.field;
        };
        _this.updateFormItem = function () {
            if (_this.isDestroyed)
                return;
            _this.forceUpdate();
            var updateFormItem = _this.context.updateFormItem;
            updateFormItem && updateFormItem(_this.props.field, _this.errors);
        };
        _this.onStoreChange = function (type, info) {
            var fields = isArray(info.field) ? info.field : [info.field];
            var _a = _this.props, field = _a.field, shouldUpdate = _a.shouldUpdate;
            // isInner: the value is changed by innerSetValue
            var shouldUpdateItem = function (extra) {
                if (shouldUpdate) {
                    var shouldRender = false;
                    if (isFunction(shouldUpdate)) {
                        shouldRender = shouldUpdate(info.prev, info.current, __assign({ field: info.field }, extra));
                    }
                    else {
                        shouldRender = !isEqualWith(info.prev, info.current);
                    }
                    if (shouldRender) {
                        _this.updateFormItem();
                    }
                }
            };
            switch (type) {
                case 'reset':
                    _this.touched = false;
                    _this.errors = null;
                    _this.updateFormItem();
                    break;
                case 'innerSetValue':
                    if (isFieldMath(field, fields)) {
                        _this.touched = true;
                        _this.updateFormItem();
                        return;
                    }
                    shouldUpdateItem({
                        isInner: true,
                        isFormList: info.isFormList,
                    });
                    break;
                case 'setFieldValue':
                    if (isFieldMath(field, fields)) {
                        _this.touched = true;
                        if (info.data && 'touched' in info.data) {
                            _this.touched = info.data.touched;
                        }
                        if (info.data && 'errors' in info.data) {
                            _this.errors = info.data.errors;
                        }
                        else if (!isEqualWith(get(info.prev, field), get(info.current, field))) {
                            _this.errors = null;
                        }
                        _this.updateFormItem();
                        return;
                    }
                    shouldUpdateItem();
                    break;
                default:
                    break;
            }
        };
        _this.innerSetFieldValue = function (field, value) {
            if (!field)
                return;
            var store = _this.context.store;
            var methods = store.getInnerMethods(true);
            methods.innerSetFieldValue(field, value);
            var changedValue = {};
            set(changedValue, field, value);
            _this.props.onValuesChange &&
                _this.props.onValuesChange(changedValue, __assign({}, store.getFieldsValue()));
        };
        _this.handleTrigger = function (_value) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var store = _this.context.store;
            var _b = _this.props, field = _b.field, trigger = _b.trigger, validateTrigger = _b.validateTrigger, normalize = _b.normalize, getValueFromEvent = _b.getValueFromEvent;
            var value = isFunction(getValueFromEvent) ? getValueFromEvent.apply(void 0, __spreadArray([_value], __read(args), false)) : _value;
            var children = _this.props.children;
            var normalizeValue = value;
            // break if value is instance of SyntheticEvent, 'cos value is missing
            if (isSyntheticEvent(value)) {
                warn(true, 'changed value missed, please check whether extra elements is outta input/select controled by Form.Item');
                value.stopPropagation();
                return;
            }
            if (typeof normalize === 'function') {
                normalizeValue = normalize(value, store.getFieldValue(field), __assign({}, store.getFieldsValue()));
            }
            _this.touched = true;
            _this.innerSetFieldValue(field, normalizeValue);
            if (isArray(validateTrigger)) {
                validateTrigger.forEach(function (vt) {
                    if (vt === trigger) {
                        _this.validateField();
                    }
                });
            }
            else if (isString(validateTrigger)) {
                if (validateTrigger === trigger) {
                    _this.validateField();
                }
            }
            if (children && children.props && children.props[trigger]) {
                (_a = children.props)[trigger].apply(_a, __spreadArray([normalizeValue], __read(args), false));
            }
        };
        _this.validateField = function () {
            var _a;
            var store = _this.context.store;
            var _b = _this.props, field = _b.field, rules = _b.rules;
            var value = store.getFieldValue(field);
            if (rules && field) {
                var schema_1 = new Schema((_a = {},
                    _a[field] = rules.map(function (rule) {
                        if (!rule.type && !rule.validator) {
                            rule.type = 'string';
                        }
                        return rule;
                    }),
                    _a), { ignoreEmptyString: true });
                return new Promise(function (resolve) {
                    var _a;
                    schema_1.validate((_a = {}, _a[field] = value, _a), function (err) {
                        if (err) {
                            _this.errors = err[field];
                        }
                        else {
                            _this.errors = null;
                        }
                        _this.updateFormItem();
                        resolve({
                            error: err,
                            value: value,
                            field: field,
                        });
                    });
                });
            }
            if (_this.errors) {
                _this.errors = null;
                _this.updateFormItem();
            }
            return Promise.resolve({ error: null, value: value, field: field });
        };
        _this.getChild = function () {
            var children = _this.props.children;
            var store = _this.context.store;
            if (isFunction(children)) {
                return children(store.getFields(), __assign({}, store));
            }
            return children;
        };
        if ('initialValue' in props && _this.hasFieldProps()) {
            var innerMethods = context.store.getInnerMethods(true);
            innerMethods.innerSetInitialValue(props.field, props.initialValue);
        }
        return _this;
    }
    Control.prototype.componentDidMount = function () {
        var store = this.context.store;
        if (store) {
            var innerMethods = store.getInnerMethods(true);
            this.removeRegisterField = innerMethods.registerField(this);
        }
    };
    Control.prototype.componentWillUnmount = function () {
        this.removeRegisterField && this.removeRegisterField();
        this.removeRegisterField = null;
        // destroy errors
        var updateFormItem = this.context.updateFormItem;
        updateFormItem && updateFormItem(this.props.field, null);
        this.isDestroyed = true;
    };
    Control.prototype.renderControl = function (children, id) {
        var _a, _b;
        var _this = this;
        var _c;
        var _d = this.props, field = _d.field, _e = _d.trigger, trigger = _e === void 0 ? 'onChange' : _e, _f = _d.triggerPropName, triggerPropName = _f === void 0 ? 'value' : _f, _g = _d.validateTrigger, validateTrigger = _g === void 0 ? 'onChange' : _g, validateStatus = _d.validateStatus, formatter = _d.formatter;
        var _h = this.context, store = _h.store, ctxDisabled = _h.disabled;
        var disabled = 'disabled' in this.props ? this.props.disabled : ctxDisabled;
        var child = React.Children.only(children);
        var childProps = (_a = {},
            _a[trigger] = this.handleTrigger,
            // used by label
            _a.id = classNames((_c = child.props) === null || _c === void 0 ? void 0 : _c.id, (_b = {}, _b[id + "_input"] = id, _b)),
            _a);
        if (isArray(validateTrigger)) {
            validateTrigger.forEach(function (vt) {
                if (vt !== trigger) {
                    childProps[vt] = function (e) {
                        _this.validateField();
                        child.props[vt] && child.props[vt](e);
                    };
                }
            });
        }
        else if (isString(validateTrigger)) {
            if (validateTrigger !== trigger) {
                childProps[validateTrigger] = function (e) {
                    _this.validateField();
                    child.props[validateTrigger] && child.props[validateTrigger](e);
                };
            }
        }
        if (disabled !== undefined) {
            childProps.disabled = disabled;
        }
        var _value = store.getFieldValue(field);
        if (isFunction(formatter)) {
            _value = formatter(_value);
        }
        childProps[triggerPropName] = _value;
        if (!validateStatus && this.errors) {
            childProps.error = true;
        }
        return React.cloneElement(child, childProps);
    };
    Control.prototype.render = function () {
        var _a = this.props, noStyle = _a.noStyle, field = _a.field, isFormList = _a.isFormList, hasFeedback = _a.hasFeedback;
        var validateStatus = this.props.validateStatus || (this.errors ? 'error' : '');
        var _b = this.context, prefixCls = _b.prefixCls, getFormElementId = _b.getFormElementId;
        var child = this.getChild();
        var id = this.hasFieldProps() ? getFormElementId(field) : undefined;
        if (this.hasFieldProps() && !isFormList && React.Children.count(child) === 1) {
            child = this.renderControl(child, id);
        }
        if (noStyle) {
            return child;
        }
        return (React.createElement("div", { className: prefixCls + "-item-control-wrapper" },
            React.createElement("div", { className: prefixCls + "-item-control", id: id },
                React.createElement("div", { className: prefixCls + "-item-control-children" },
                    child,
                    validateStatus && hasFeedback && (React.createElement("div", { className: prefixCls + "-item-feedback" },
                        validateStatus === 'warning' && React.createElement(IconExclamationCircleFill, null),
                        validateStatus === 'success' && React.createElement(IconCheckCircleFill, null),
                        validateStatus === 'error' && React.createElement(IconCloseCircleFill, null),
                        validateStatus === 'validating' && React.createElement(IconLoading, null)))))));
    };
    Control.defaultProps = {
        trigger: 'onChange',
        triggerPropName: 'value',
        validateTrigger: 'onChange',
    };
    Control.isFormControl = true;
    Control.contextType = FormItemContext;
    return Control;
}(Component));
export default Control;
