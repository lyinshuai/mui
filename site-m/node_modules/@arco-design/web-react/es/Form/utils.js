var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import cloneDeepWith from 'lodash/cloneDeepWith';
import lodashSet from 'lodash/set';
import { isArray, isObject } from '../_util/is';
export function cloneDeep(value) {
    // 只有对象才执行拷贝，否则直接返回。 如果是 File，MouseEvent对象，都可以直接返回
    return cloneDeepWith(value, function (val) {
        if (!isObject(val) && !isArray(val)) {
            return val;
        }
    });
}
export function set(target, field, value) {
    lodashSet(target, field, cloneDeep(value));
    return target;
}
// iteratively get all keys of object including nested objects
// e.g. const myObj = { a: { b: { c: [1,2] } } }
// iterativelyGetKeys(myObj) returns ['a.b.0.c.0', 'a.b.0.c.1']
// reference https://stackoverflow.com/a/47063174
export function iterativelyGetKeys(obj, prefix) {
    if (prefix === void 0) { prefix = ''; }
    if (!obj) {
        return [];
    }
    return Object.keys(obj).reduce(function (res, el) {
        if (typeof obj[el] === 'object' && obj[el] !== null) {
            return __spreadArray(__spreadArray([], __read(res), false), __read(iterativelyGetKeys(obj[el], prefix + el + ".")), false);
        }
        return __spreadArray(__spreadArray([], __read(res), false), [prefix + el], false);
    }, []);
}
// 判断是否是个事件对象 e?.constructor?.name 可能不是 SyntheticEvent，跟业务项目的打包方式有关系
export function isSyntheticEvent(e) {
    var _a;
    return ((_a = e === null || e === void 0 ? void 0 : e.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'SyntheticEvent' || (e === null || e === void 0 ? void 0 : e.nativeEvent) instanceof Event;
}
