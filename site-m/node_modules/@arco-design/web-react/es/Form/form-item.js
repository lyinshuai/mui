var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React, { cloneElement, forwardRef, useContext, useState, useEffect, useMemo, useRef, } from 'react';
import { CSSTransition } from 'react-transition-group';
import cs from '../_util/classNames';
import { isArray, isFunction, isUndefined, isObject } from '../_util/is';
import Grid from '../Grid';
import Control from './control';
import { FormItemContext as RawFormItemContext, FormContext, } from './context';
import { ConfigContext } from '../ConfigProvider';
import omit from '../_util/omit';
var Row = Grid.Row;
var Col = Grid.Col;
// 标签
var FormItemLabel = function (_a) {
    var htmlFor = _a.htmlFor, showColon = _a.showColon, label = _a.label, requiredSymbol = _a.requiredSymbol, required = _a.required, rules = _a.rules, prefix = _a.prefix;
    var isRequiredRule = isArray(rules) && rules.some(function (rule) { return rule && rule.required; });
    return label ? (React.createElement("label", { htmlFor: htmlFor && htmlFor + "_input" },
        (required || isRequiredRule) && requiredSymbol && (React.createElement("strong", { className: prefix + "-form-item-symbol" },
            React.createElement("svg", { fill: "currentColor", viewBox: "0 0 1024 1024", width: "1em", height: "1em" },
                React.createElement("path", { d: "M583.338667 17.066667c18.773333 0 34.133333 15.36 34.133333 34.133333v349.013333l313.344-101.888a34.133333 34.133333 0 0 1 43.008 22.016l42.154667 129.706667a34.133333 34.133333 0 0 1-21.845334 43.178667l-315.733333 102.4 208.896 287.744a34.133333 34.133333 0 0 1-7.509333 47.786666l-110.421334 80.213334a34.133333 34.133333 0 0 1-47.786666-7.509334L505.685333 706.218667 288.426667 1005.226667a34.133333 34.133333 0 0 1-47.786667 7.509333l-110.421333-80.213333a34.133333 34.133333 0 0 1-7.509334-47.786667l214.186667-295.253333L29.013333 489.813333a34.133333 34.133333 0 0 1-22.016-43.008l42.154667-129.877333a34.133333 34.133333 0 0 1 43.008-22.016l320.512 104.106667L412.672 51.2c0-18.773333 15.36-34.133333 34.133333-34.133333h136.533334z" })))),
        ' ',
        label,
        showColon ? ':' : '')) : null;
};
// 错误提示文字
var FormItemTip = function (_a) {
    var _b;
    var prefixCls = _a.prefixCls, help = _a.help, propsErrors = _a.errors;
    var errorTip = propsErrors.map(function (item, i) {
        if (item) {
            return React.createElement("div", { key: i }, item.message);
        }
    });
    var show = help !== undefined || !!errorTip.length;
    var tip = help !== undefined ? help : errorTip.length > 0 && errorTip;
    return (show && (React.createElement(CSSTransition, { in: show, appear: true, classNames: "formblink", timeout: 300, unmountOnExit: true },
        React.createElement("div", { className: cs(prefixCls + "-message", (_b = {},
                _b[prefixCls + "-message-help"] = help !== undefined,
                _b)) }, tip))));
};
var Item = function (props, ref) {
    var _a, _b, _c, _d;
    var _e, _f;
    var _g = useContext(ConfigContext), getPrefixCls = _g.getPrefixCls, prefix = _g.prefixCls;
    var topFormContext = useContext(RawFormItemContext);
    var _h = __read(useState(null), 2), errors = _h[0], setErrors = _h[1];
    var formContext = useContext(FormContext);
    var prefixCls = formContext.prefixCls || getPrefixCls('form');
    var formLayout = props.layout || formContext.layout;
    var labelAlign = props.labelAlign || formContext.labelAlign;
    var isDestroyed = useRef(false);
    // update error status
    var updateInnerFormItem = function (field, errors) {
        if (isDestroyed.current) {
            return;
        }
        setErrors(function (innerErrors) {
            var newErrors = __assign({}, innerErrors);
            if (errors) {
                newErrors[field] = errors;
            }
            else {
                delete newErrors[field];
            }
            return newErrors;
        });
    };
    var updateFormItem = isObject(props.noStyle) && props.noStyle.showErrorTip && topFormContext.updateFormItem
        ? topFormContext.updateFormItem
        : updateInnerFormItem;
    useEffect(function () {
        return function () {
            isDestroyed.current = true;
            setErrors(null);
        };
    }, []);
    var contextProps = __assign(__assign({}, formContext), { prefixCls: prefixCls, updateFormItem: updateFormItem, disabled: 'disabled' in props ? props.disabled : formContext.disabled });
    var label = props.label, extra = props.extra, className = props.className, style = props.style, validateStatus = props.validateStatus, rest = __rest(props, ["label", "extra", "className", "style", "validateStatus"]);
    var labelClassNames = cs(prefixCls + "-label-item", (_a = {},
        _a[prefixCls + "-label-item-left"] = labelAlign === 'left',
        _a));
    var isErrorStatus = useMemo(function () {
        return errors && Object.values(errors).length;
    }, [errors]);
    var itemStatus = validateStatus || (isErrorStatus ? 'error' : '');
    var classNames = cs(prefixCls + "-item", (_b = {},
        _b[prefixCls + "-item-error"] = isErrorStatus || props.help !== undefined,
        _b[prefixCls + "-item-status-" + itemStatus] = itemStatus,
        _b[prefixCls + "-item-has-help"] = props.help !== undefined,
        _b[prefixCls + "-item-has-feedback"] = itemStatus && props.hasFeedback,
        _b), prefixCls + "-layout-" + formLayout, className);
    var cloneElementWithDisabled = function () {
        var _a;
        var field = props.field, children = props.children;
        var disabled = 'disabled' in props ? props.disabled : formContext.disabled;
        if (isFunction(children)) {
            return (React.createElement(Control, __assign({ disabled: disabled }, props, (field ? { key: field } : {})), function () {
                var rest = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    rest[_i] = arguments[_i];
                }
                return children.apply(void 0, __spreadArray([], __read(rest), false));
            }));
        }
        if (isArray(children)) {
            var childrenDom = React.Children.map(children, function (child, i) {
                var key = (isObject(child) && child.key) || i;
                var childProps = !isUndefined(disabled) ? { key: key, disabled: disabled } : { key: key };
                return isObject(child) ? cloneElement(child, childProps) : child;
            });
            return (React.createElement(Control, __assign({}, props, { field: undefined }), childrenDom));
        }
        if (React.Children.count(children) === 1) {
            if (field) {
                return (React.createElement(Control, __assign({ disabled: disabled }, props, { key: field }), children));
            }
            if (isObject(children)) {
                // Compatible Form.Control
                if ((_a = children.type) === null || _a === void 0 ? void 0 : _a.isFormControl) {
                    return children;
                }
                var childProps = isUndefined(disabled) ? {} : { disabled: disabled };
                return (React.createElement(Control, __assign({}, props, { field: undefined }), cloneElement(children, childProps)));
            }
        }
        return children;
    };
    var FormItemContext = RawFormItemContext;
    var newFormContext = __assign({}, formContext);
    if (!props.noStyle) {
        newFormContext.wrapperCol = undefined;
        newFormContext.labelCol = undefined;
    }
    return (React.createElement(FormContext.Provider, { value: newFormContext },
        React.createElement(FormItemContext.Provider, { value: contextProps }, props.noStyle ? (cloneElementWithDisabled()) : (React.createElement(Row, __assign({ ref: ref }, omit(rest, [
            'children',
            'prefixCls',
            'store',
            'initialValue',
            'field',
            'labelCol',
            'wrapperCol',
            'colon',
            'disabled',
            'rules',
            'trigger',
            'triggerPropName',
            'validateTrigger',
            'noStyle',
            'required',
            'hasFeedback',
            'help',
            'normalize',
            'formatter',
            'getValueFromEvent',
            'shouldUpdate',
            'field',
            'isInner',
            'labelAlign',
            'layout',
            'requiredSymbol',
            'isFormList',
        ]), { className: classNames, div: formLayout !== 'horizontal', style: style }),
            label ? (React.createElement(Col, __assign({}, (props.labelCol || formContext.labelCol), { className: cs(labelClassNames, (_e = props.labelCol) === null || _e === void 0 ? void 0 : _e.className, (_f = formContext.labelCol) === null || _f === void 0 ? void 0 : _f.className, (_c = {},
                    _c[prefixCls + "-label-item-flex"] = !props.labelCol && !formContext.labelCol,
                    _c)) }),
                React.createElement(FormItemLabel, { htmlFor: props.field && formContext.getFormElementId(props.field), label: label, prefix: prefix, requiredSymbol: 'requiredSymbol' in props ? props.requiredSymbol : formContext.requiredSymbol, required: props.required, rules: props.rules, showColon: 'colon' in props ? props.colon : formContext.colon }))) : null,
            React.createElement(Col, __assign({ className: cs(prefixCls + "-item-wrapper", (_d = {},
                    _d[prefixCls + "-item-wrapper-flex"] = !props.wrapperCol && !formContext.wrapperCol,
                    _d)) }, (props.wrapperCol || formContext.wrapperCol)),
                cloneElementWithDisabled(),
                React.createElement(FormItemTip, { prefixCls: prefixCls, help: props.help, errors: isErrorStatus ? Object.values(errors) : [] }),
                extra && React.createElement("div", { className: prefixCls + "-extra" }, extra)))))));
};
var ItemComponent = forwardRef(Item);
ItemComponent.defaultProps = {
    trigger: 'onChange',
    triggerPropName: 'value',
    validateTrigger: 'onChange',
};
ItemComponent.displayName = 'FormItem';
export default ItemComponent;
