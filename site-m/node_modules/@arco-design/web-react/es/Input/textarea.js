var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useContext, useRef, useState, useLayoutEffect, useImperativeHandle, useMemo, } from 'react';
import cs from '../_util/classNames';
import { Enter } from '../_util/keycode';
import autoSizeTextAreaHeight from './autoSizeTextAreaHeight';
import omit from '../_util/omit';
import { ConfigContext } from '../ConfigProvider';
import { formatValue } from './input';
import useMergeValue from '../_util/hooks/useMergeValue';
import IconClose from '../../icon/react-icon/IconClose';
import IconHover from '../_class/icon-hover';
import { isObject } from '../_util/is';
var TextArea = function (props, ref) {
    var _a, _b, _c;
    var className = props.className, style = props.style, wrapperStyle = props.wrapperStyle, placeholder = props.placeholder, disabled = props.disabled, error = props.error, maxLength = props.maxLength, showWordLimit = props.showWordLimit, allowClear = props.allowClear, onClear = props.onClear, rest = __rest(props, ["className", "style", "wrapperStyle", "placeholder", "disabled", "error", "maxLength", "showWordLimit", "allowClear", "onClear"]);
    var trueMaxLength = isObject(maxLength) ? maxLength.length : maxLength;
    var mergedMaxLength = isObject(maxLength) && maxLength.errorOnly ? undefined : trueMaxLength;
    var isComposition = useRef(false);
    var textareaRef = useRef();
    var _d = __read(useState(''), 2), compositionValue = _d[0], setCompositionValue = _d[1];
    var _e = __read(useState({}), 2), textAreaStyle = _e[0], setTextAreaStyle = _e[1];
    var _f = __read(useMergeValue('', {
        defaultValue: 'defaultValue' in props ? formatValue(props.defaultValue, mergedMaxLength) : undefined,
        value: 'value' in props ? formatValue(props.value, mergedMaxLength) : undefined,
    }), 2), value = _f[0], setValue = _f[1];
    var getPrefixCls = useContext(ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('textarea');
    if (disabled) {
        textAreaStyle.resize = 'none';
    }
    var handleChangeValue = function (value, e) {
        var onChange = props.onChange;
        if (!('value' in props)) {
            setValue(value);
        }
        onChange && onChange(value, e);
    };
    var handleChange = function (e) {
        var newValue = e.currentTarget.value;
        if (!isComposition.current) {
            if (mergedMaxLength) {
                if (newValue.length <= trueMaxLength) {
                    handleChangeValue(newValue, e);
                }
            }
            else {
                handleChangeValue(newValue, e);
            }
        }
        else {
            setCompositionValue(newValue);
        }
    };
    var onComposition = function (e) {
        if (e.type === 'compositionend') {
            isComposition.current = false;
            setCompositionValue(undefined);
            handleChangeValue(e.target.value, e);
        }
        else {
            isComposition.current = true;
        }
    };
    var resizeTextAreaHeight = function () {
        var textAreaStyle = autoSizeTextAreaHeight(props.autoSize, textareaRef.current);
        if (textAreaStyle) {
            setTextAreaStyle(textAreaStyle);
        }
    };
    var handleClearClick = function (e) {
        e.stopPropagation();
        if (textareaRef.current && textareaRef.current.focus) {
            textareaRef.current.focus();
        }
        handleChangeValue('', e);
        onClear && onClear();
    };
    useLayoutEffect(function () {
        resizeTextAreaHeight();
    }, [value]);
    useImperativeHandle(ref, function () { return ({
        dom: textareaRef.current,
        focus: function () {
            textareaRef.current && textareaRef.current.focus && textareaRef.current.focus();
        },
        blur: function () {
            textareaRef.current && textareaRef.current.blur && textareaRef.current.blur();
        },
    }); }, []);
    var valueLength = value ? value.length : 0;
    var withWrapper = (trueMaxLength && showWordLimit) || allowClear;
    var lengthError = useMemo(function () {
        if (!mergedMaxLength && trueMaxLength) {
            return valueLength > trueMaxLength;
        }
        return false;
    }, [valueLength, trueMaxLength, mergedMaxLength]);
    var classNames = cs(prefixCls, (_a = {},
        _a[prefixCls + "-error"] = error || lengthError,
        _a[prefixCls + "-disabled"] = disabled,
        _a), className);
    var TextAreaElement = (React.createElement("textarea", __assign({}, omit(rest, ['autoSize', 'defaultValue', 'onPressEnter']), { maxLength: mergedMaxLength, ref: textareaRef, style: __assign(__assign({}, style), textAreaStyle), className: classNames, placeholder: placeholder, disabled: disabled, onChange: handleChange, onKeyDown: function (e) {
            var onKeyDown = props.onKeyDown, onPressEnter = props.onPressEnter;
            var keyCode = e.keyCode || e.which;
            onKeyDown && onKeyDown(e);
            if (keyCode === Enter.code) {
                onPressEnter && onPressEnter(e);
            }
        }, onCompositionStart: onComposition, onCompositionUpdate: onComposition, onCompositionEnd: onComposition, value: compositionValue || value || '' })));
    if (withWrapper) {
        var showClearIcon = !disabled && allowClear && value;
        return (React.createElement("div", { className: cs(prefixCls + "-wrapper", (_b = {},
                _b[prefixCls + "-clear-wrapper"] = allowClear,
                _b)), style: wrapperStyle },
            TextAreaElement,
            showClearIcon ? (React.createElement(IconHover, { className: prefixCls + "-clear-icon" },
                React.createElement(IconClose, { onClick: handleClearClick, 
                    // keep focus status
                    onMouseDown: function (e) {
                        e.preventDefault();
                    } }))) : null,
            trueMaxLength && showWordLimit && (React.createElement("span", { className: cs(prefixCls + "-word-limit", (_c = {},
                    _c[prefixCls + "-word-limit-error"] = lengthError,
                    _c)) },
                valueLength,
                "/",
                trueMaxLength))));
    }
    return TextAreaElement;
};
var TextAreaRef = React.forwardRef(TextArea);
TextAreaRef.displayName = 'TextArea';
export default TextAreaRef;
