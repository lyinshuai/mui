var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import cs from '../_util/classNames';
import Checkbox from '../Checkbox';
import omit from '../_util/omit';
function Option(props, ref) {
    var _a, _b;
    var style = props.style, className = props.className, wrapperClassName = props.wrapperClassName, children = props.children, disabled = props.disabled, prefixCls = props.prefixCls, isMultipleMode = props.isMultipleMode, propValue = props.value, valueActive = props.valueActive, valueSelect = props.valueSelect, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onClickOption = props.onClickOption, rest = __rest(props, ["style", "className", "wrapperClassName", "children", "disabled", "prefixCls", "isMultipleMode", "value", "valueActive", "valueSelect", "onMouseEnter", "onMouseLeave", "onClickOption"]);
    var value = 'value' in props ? propValue : children.toString();
    var isChecked = isMultipleMode
        ? valueSelect.indexOf(value) !== -1
        : valueSelect === value;
    var optionLabelProps = __assign({ style: style, className: cs(prefixCls + "-option", (_a = {},
            _a[prefixCls + "-option-selected"] = isChecked,
            _a[prefixCls + "-option-disabled"] = disabled,
            _a[prefixCls + "-option-hover"] = value === valueActive,
            _a[prefixCls + "-option-empty"] = !children,
            _a), className), onMouseEnter: function () { return onMouseEnter && onMouseEnter(value); }, onMouseLeave: function () { return onMouseLeave && onMouseLeave(); }, onClick: function (event) {
            onClickOption && onClickOption(value, disabled);
            rest.onClick && rest.onClick(event);
        } }, omit(rest, ['_key', 'extra', 'isSelectOption', 'onClick', 'onMouseEnter', 'onMouseLeave']));
    if (isMultipleMode) {
        return (React.createElement("li", { ref: ref, className: cs(prefixCls + "-option-wrapper", (_b = {},
                _b[prefixCls + "-option-wrapper-selected"] = isChecked,
                _b[prefixCls + "-option-wrapper-disabled"] = disabled,
                _b), wrapperClassName) },
            React.createElement(Checkbox, { className: prefixCls + "-checkbox", checked: isChecked, disabled: disabled, onChange: optionLabelProps.onClick }),
            React.createElement("span", __assign({}, optionLabelProps), children)));
    }
    return React.createElement("li", __assign({}, optionLabelProps), children);
}
var OptionComponent = React.forwardRef(Option);
OptionComponent.defaultProps = {
    // private use
    isSelectOption: true,
};
export default OptionComponent;
