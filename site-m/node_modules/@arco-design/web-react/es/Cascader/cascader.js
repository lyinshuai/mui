var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import isEqualWith from 'lodash/isEqualWith';
import React, { forwardRef, useEffect, useState, useImperativeHandle, useRef, useContext, useCallback, } from 'react';
import { isArray, isFunction, isString } from '../_util/is';
import Trigger from '../Trigger';
import CascaderPanel from './panel/list';
import SearchPanel from './panel/search-panel';
import { ConfigContext } from '../ConfigProvider';
import Store from './base/store';
import SelectView from '../_class/select-view';
import cs from '../_util/classNames';
import useMergeValue from '../_util/hooks/useMergeValue';
import useUpdate from '../_util/hooks/useUpdate';
import { Enter, Tab } from '../_util/keycode';
import useCurrentRef from './hook/useRefCurrent';
import useMergeProps from '../_util/hooks/useMergeProps';
function isEmptyValue(value) {
    return !value || (isArray(value) && value.length === 0);
}
export var DefaultFieldNames = {
    label: 'label',
    value: 'value',
    isLeaf: 'isLeaf',
    children: 'children',
    disabled: 'disabled',
};
function getConfig(props) {
    return {
        showEmptyChildren: props.showEmptyChildren,
        changeOnSelect: props.changeOnSelect,
        lazyload: !!props.loadMore,
        fieldNames: props.fieldNames,
        filterOption: props.filterOption,
    };
}
function getStore(props, value) {
    var tmp = value ? (Array.isArray(value[0]) ? value : [value]) : [];
    return new Store(props.options || [], tmp, getConfig(props));
}
var formatValue = function (value, isMultiple) {
    if (value === undefined) {
        return [];
    }
    if (isMultiple) {
        return value;
    }
    return [value];
};
var defaultProps = {
    options: [],
    bordered: true,
    fieldNames: DefaultFieldNames,
    trigger: 'click',
    expandTrigger: 'click',
};
function Cascader(baseProps, ref) {
    var _a = useContext(ConfigContext), getPrefixCls = _a.getPrefixCls, renderEmpty = _a.renderEmpty, componentConfig = _a.componentConfig;
    var props = useMergeProps(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Cascader);
    var disabled = props.disabled, renderFormat = props.renderFormat, getPopupContainer = props.getPopupContainer, children = props.children, triggerProps = props.triggerProps, expandTrigger = props.expandTrigger;
    var prefixCls = getPrefixCls('cascader');
    var isMultiple = props.mode === 'multiple';
    var timerRef = useRef(null);
    var _b = __read(useState(''), 2), inputValue = _b[0], setInputValue = _b[1];
    // 暂存被选中的值对应的节点。仅在onSearch的时候用到
    // 避免出现下拉列表改变，之前选中的option找不到对应的节点，展示上会出问题。
    var stashNodes = useRef([]);
    var propsValue = 'value' in props ? formatValue(props.value, isMultiple) : undefined;
    // 为什么不用useMergeValue呢？ 因为在props.value改变时，需要进行一些选中状态的处理，见以下 useUpdate
    var _c = __read(useState(propsValue || ('defaultValue' in props ? formatValue(props.defaultValue, isMultiple) : [])), 2), stateValue = _c[0], setValue = _c[1];
    var mergeValue = 'value' in props ? propsValue : stateValue;
    var _d = __read(useMergeValue(false, {
        value: props.popupVisible,
        defaultValue: props.defaultPopupVisible,
    }), 2), popupVisible = _d[0], setPopupVisible = _d[1];
    var selectRef = useRef(null);
    var store = useCurrentRef(function () { return getStore(props, mergeValue); }, [
        JSON.stringify(getConfig(props)),
        props.options,
    ]);
    useEffect(function () {
        var clearTimer = function () {
            clearTimeout(timerRef.current);
            timerRef.current = null;
        };
        if (!popupVisible && inputValue) {
            if (timerRef.current) {
                clearTimer();
            }
            timerRef.current = setTimeout(function () {
                setInputValue('');
                timerRef.current = null;
            }, 200);
        }
        return function () {
            clearTimer();
        };
    }, [popupVisible]);
    useUpdate(function () {
        setValue(function (stateValue) {
            var newValue = formatValue(props.value, isMultiple);
            if (!isEqualWith(stateValue, newValue)) {
                store.setNodeCheckedByValue(newValue);
                return newValue;
            }
            return stateValue;
        });
    }, [props.value, isMultiple]);
    useImperativeHandle(ref, function () { return selectRef.current; }, []);
    var updateStashNodes = function (nodes) {
        stashNodes.current = [].concat(nodes, stashNodes.current);
    };
    var getSelectedOptionsByValue = function (values) {
        var nodes = store.getCheckedNodes().concat(stashNodes.current);
        var result = [];
        values.map(function (value) {
            var node = nodes.find(function (item) { return isEqualWith(item.pathValue, value); });
            if (node) {
                result.push(node.getPathNodes().map(function (x) { return x._data; }));
            }
        });
        return result;
    };
    var handleVisibleChange = useCallback(function (newVisible) {
        if (newVisible !== popupVisible) {
            props.onVisibleChange && props.onVisibleChange(newVisible);
            if (!('popupVisible' in props)) {
                setPopupVisible(newVisible);
            }
        }
    }, [props.onVisibleChange, popupVisible]);
    var renderText = useCallback(function (value) {
        var _a;
        // store 中不存在时，从stashNodes.current中找一下对应节点
        var options = getSelectedOptionsByValue([value])[0] || [];
        var text;
        var valueShow = isArray(value) ? value.map(function (x) { return String(x); }) : [];
        if (options.length) {
            valueShow = options.map(function (x) { return x.label; });
        }
        if (isFunction(renderFormat)) {
            text = renderFormat(valueShow);
        }
        else if (valueShow.every(function (v) { return isString(v); })) {
            text = valueShow.join(' / ');
        }
        else {
            text = valueShow.reduce(function (total, item, index) {
                return total.concat(index === 0 ? [item] : [' / ', item]);
            }, []);
        }
        return {
            text: text || '',
            disabled: (_a = options[options.length - 1]) === null || _a === void 0 ? void 0 : _a.disabled,
        };
    }, [store, renderFormat]);
    // isTouch: 是否是通过点击remove图标或者清除图标改变的值
    var handleChange = function (newValue, isTouch) {
        setValue(function (mergeValue) {
            var _a;
            var onChange = props.onChange, changeOnSelect = props.changeOnSelect, expandTrigger = props.expandTrigger;
            var isSame = isEqualWith(mergeValue, newValue);
            if (!isSame) {
                if (isTouch || !isMultiple) {
                    store.setNodeCheckedByValue(newValue);
                }
            }
            var nodes = store.getCheckedNodes();
            !isSame && updateStashNodes(nodes);
            var selectedOptions = getSelectedOptionsByValue(newValue);
            if (!isSame) {
                var _value = isMultiple ? newValue : newValue[0];
                var _selectedOptions = isMultiple ? selectedOptions : selectedOptions[0];
                onChange &&
                    onChange(_value, _selectedOptions, {
                        dropdownVisible: popupVisible,
                    });
            }
            if (!isMultiple) {
                if (inputValue) {
                    // 单选时选择搜索项，直接关闭面板
                    handleVisibleChange(false);
                }
                else if ((selectedOptions[0] && ((_a = selectedOptions[0][selectedOptions[0].length - 1]) === null || _a === void 0 ? void 0 : _a.isLeaf)) ||
                    (changeOnSelect && expandTrigger === 'hover')) {
                    handleVisibleChange(false);
                }
            }
            // 这里直接通过setValue修改stateValue是为了节省受控模式下，不断通过外部value查找节点，计算选中状态的操作。
            // 和useUpdate配合，在statevalue和外部传入的value不相等的时候才进行计算。
            return isSame ? mergeValue : newValue;
        });
    };
    var onRemoveCheckedItem = function (item, index, e) {
        e.stopPropagation();
        if (item.disabled) {
            return;
        }
        var newValue = mergeValue.filter(function (_, i) { return i !== index; });
        handleChange(newValue, true);
    };
    var renderEmptyEle = function (width) {
        var wd = width || (selectRef.current && selectRef.current.getWidth());
        return (React.createElement("div", { className: prefixCls + "-list-empty", style: { width: wd } }, props.notFoundContent || renderEmpty('Cascader')));
    };
    var renderPopup = function () {
        var _a;
        var width = selectRef.current && selectRef.current.getWidth();
        var showSearchPanel = !isFunction(props.onSearch) && !!inputValue;
        var dropdownRender = isFunction(props.dropdownRender) ? props.dropdownRender : function (menu) { return menu; };
        return (React.createElement("div", { className: cs(prefixCls + "-popup", (_a = {},
                _a[prefixCls + "-popup-trigger-hover"] = props.expandTrigger === 'hover',
                _a)) }, dropdownRender(React.createElement("div", { className: prefixCls + "-popup-inner", onMouseDown: function (e) { return e.preventDefault(); } }, showSearchPanel ? (React.createElement(SearchPanel, { style: { minWidth: width }, store: store, inputValue: inputValue, renderEmpty: function () { return renderEmptyEle(width); }, multiple: isMultiple, onChange: handleChange, prefixCls: prefixCls, onEsc: function () {
                handleVisibleChange(false);
            }, value: mergeValue })) : (React.createElement(CascaderPanel, { expandTrigger: expandTrigger, store: store, dropdownColumnRender: props.dropdownColumnRender, renderOption: props.renderOption, changeOnSelect: props.changeOnSelect, showEmptyChildren: props.showEmptyChildren || !!props.loadMore, multiple: isMultiple, onChange: handleChange, loadMore: props.loadMore, prefixCls: prefixCls, renderEmpty: renderEmptyEle, popupVisible: popupVisible, value: mergeValue, renderFooter: props.renderFooter, onEsc: function () {
                handleVisibleChange(false);
            }, onDoubleClickOption: function () {
                if (props.changeOnSelect && !isMultiple) {
                    handleVisibleChange(false);
                }
            } }))))));
    };
    return (React.createElement(Trigger, __assign({ popup: renderPopup, trigger: props.trigger, disabled: disabled, getPopupContainer: getPopupContainer, position: "bl", classNames: "slideDynamicOrigin", popupAlign: { bottom: 4 }, 
        // 动态加载时，unmountOnExit 默认为false。
        unmountOnExit: 'unmountOnExit' in props ? props.unmountOnExit : !isFunction(props.loadMore), popupVisible: popupVisible }, triggerProps, { onVisibleChange: handleVisibleChange }), children || (React.createElement(SelectView, __assign({}, props, { ref: selectRef, popupVisible: popupVisible, value: isMultiple ? mergeValue : mergeValue && mergeValue[0], inputValue: inputValue, 
        // other
        isEmptyValue: isEmptyValue(mergeValue), prefixCls: prefixCls, isMultiple: isMultiple, renderText: renderText, onRemoveCheckedItem: onRemoveCheckedItem, onClear: function (e) {
            e.stopPropagation();
            if (!isMultiple) {
                handleChange([]);
            }
            else {
                var nodes = store.getCheckedNodes();
                var newValue = nodes.filter(function (x) { return x.disabled; }).map(function (x) { return x.pathValue; });
                store.setNodeCheckedByValue(newValue);
                handleChange(newValue, true);
            }
            props.onClear && props.onClear(!!popupVisible);
        }, onKeyDown: function (e) {
            if (disabled) {
                return;
            }
            e.stopPropagation();
            var keyCode = e.keyCode || e.which;
            if (keyCode === Enter.code && !popupVisible) {
                handleVisibleChange(true);
                e.preventDefault();
            }
            if (keyCode === Tab.code && popupVisible) {
                handleVisibleChange(false);
            }
        }, 
        // onFocus={this.onFocusInput}
        onChangeInputValue: function (v) {
            setInputValue(v);
            props.onSearch && props.onSearch(v);
            // tab键 focus 到输入框，此时下拉框未显示。如果输入值，展示下拉框
            if (!popupVisible) {
                handleVisibleChange(true);
            }
        } })))));
}
var CascaderComponent = forwardRef(Cascader);
CascaderComponent.displayName = 'Cascader';
export default CascaderComponent;
