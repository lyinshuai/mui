"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Navbar = void 0;
/* eslint-disable @typescript-eslint/no-use-before-define */
// @ts-nocheck
var react_1 = __importStar(require("react"));
var react_transition_group_1 = require("react-transition-group");
var web_react_1 = require("@arco-design/web-react");
var icon_1 = require("@arco-design/web-react/icon");
var resizeObserver_1 = __importDefault(require("@arco-design/web-react/es/_util/resizeObserver"));
var classnames_1 = __importDefault(require("classnames"));
var axios_1 = __importDefault(require("axios"));
var logo_svg_1 = __importDefault(require("./logo.svg"));
var index_1 = __importDefault(require("./components/select/index"));
var index_2 = __importDefault(require("./components/search-input/index"));
var index_3 = __importDefault(require("./components/search-modal/index"));
var index_4 = __importDefault(require("./components/tabs/index"));
var locale_1 = __importDefault(require("./locale"));
var context_1 = require("./context");
var themeContext_1 = require("./themeContext");
var panel_1 = __importDefault(require("./components/panel"));
var profile_1 = __importDefault(require("./components/profile"));
var navbar_module_less_1 = __importDefault(require("./style/navbar.module.less"));
// import { isInternal } from './utils/config';
// import '@arco-design/web-react/dist/css/arco.css';
var Navbar = function (props, ref) {
    var _a;
    var style = props.style, className = props.className, hideSearch = props.hideSearch, hideMessageBox = props.hideMessageBox, queryData = props.queryData, logo = props.logo, history = props.history, onChangeTheme = props.onChangeTheme, versions = props.versions, defaultVersion = props.defaultVersion, logoHref = props.logoHref, loginHref = props.loginHref, logoutHref = props.logoutHref, hideI18n = true, hideTheme = true, _b = props.lang, lang = _b === void 0 ? "zh-CN" : _b, onChangeLanguage = props.onChangeLanguage, onChangeSearchInput = props.onChangeSearchInput, onDropdownVisibleChange = props.onDropdownVisibleChange, isHome = props.isHome, tabs = props.tabs, 
    // user = props.user,
    renderNavTabs = props.renderNavTabs;
    var _c = (0, react_1.useState)(false), searchModalVisible = _c[0], setSearchModalVisible = _c[1];
    var _d = (0, react_1.useState)(false), dropdownVisible = _d[0], setDropdownVisible = _d[1];
    var _e = (0, react_1.useState)(""), screen = _e[0], setScreen = _e[1];
    var navbarRef = (0, react_1.useRef)(null) || ref;
    var navRef = (0, react_1.useRef)(null);
    var outerContext = (0, react_1.useContext)(web_react_1.ConfigProvider.ConfigContext);
    var _f = (0, react_1.useContext)(themeContext_1.NavbarThemeContext), theme = _f.theme, onHandleTheme = _f.onHandleTheme;
    var prefixCls = "ac-navbar";
    var t = locale_1.default[lang];
    var _g = (0, react_1.useState)(), innerUser = _g[0], setUser = _g[1];
    (0, react_1.useEffect)(function () {
        window.addEventListener("keydown", onKeyDown);
        return function () {
            window.removeEventListener("keydown", onKeyDown);
        };
    }, []);
    (0, react_1.useEffect)(function () {
        axios_1.default.post("/api/auth/userInfo").then(function (_c) {
            var data = _c.data;
            if (data.code === 0 && data.result) {
                var info = data.result;
                var user = __assign(__assign({}, info), { username: info.userDisplayName || info.loginName });
                setUser(user);
                window.user = user;
            }
            else {
                // window.location.href = loginHref;
            }
        });
    }, []);
    function onKeyDown(e) {
        if (document.activeElement === document.body) {
            if (e.key === "k" && (e.ctrlKey || e.metaKey)) {
                setTimeout(function () {
                    setSearchModalVisible(true);
                }, 10);
            }
        }
    }
    function goTo(url, blank) {
        if (blank) {
            window.open(url, "_blank");
            return;
        }
        var formatUrl = lang === "en-US" ? url.replace("/react", "/react/en-US") : url;
        if (history && url[0] === "/") {
            history.push(formatUrl);
            setSearchModalVisible(false);
        }
        else {
            window.location.pathname = formatUrl;
        }
    }
    function closeSearchModal() {
        setSearchModalVisible(false);
    }
    function updateScreen() {
        var width = navbarRef.current.clientWidth;
        if (width < 920) {
            setScreen("mobile");
        }
        else if (width >= 920) {
            setScreen("");
        }
    }
    function getThemeIcon() {
        switch (theme) {
            case "light":
                return react_1.default.createElement(icon_1.IconSunFill, null);
            case "dark":
                return react_1.default.createElement(icon_1.IconMoonFill, null);
            case "system":
                return react_1.default.createElement(icon_1.IconDesktop, null);
            default:
        }
    }
    var navTabsEle = react_1.default.createElement(index_4.default, {
        lang: lang,
        visible: dropdownVisible,
        tabs: tabs,
        getPopupContainer: function () {
            return navbarRef.current;
        },
        onVisibleChange: function (visible) {
            onDropdownVisibleChange && onDropdownVisibleChange(visible);
            setDropdownVisible(visible);
        },
    });
    return react_1.default.createElement(web_react_1.ConfigProvider, Object.assign({
        getPopupContainer: function () {
            return navbarRef.current;
        },
    }, outerContext), react_1.default.createElement(resizeObserver_1.default, { onResize: updateScreen }, react_1.default.createElement(context_1.NavbarContext.Provider, { value: { goTo: goTo, closeSearchModal: closeSearchModal } }, react_1.default.createElement("div", {
        className: screen === "mobile"
            ? navbar_module_less_1.default.navbarM
            : (0, classnames_1.default)(className, navbar_module_less_1.default.navbarWrapper, navbar_module_less_1.default[screen]),
        ref: navbarRef,
        style: style,
    }, screen === "mobile"
        ? react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(panel_1.default, {
            lang: lang,
            getPopupContainer: function () {
                return navbarRef.current;
            },
            isHome: isHome,
            isMobile: true,
        }), react_1.default.createElement("a", { href: logoHref, className: navbar_module_less_1.default.logoM }, logo), react_1.default.createElement(web_react_1.Dropdown, {
            droplist: react_1.default.createElement("div", { className: navbar_module_less_1.default.menu }, react_1.default.createElement("a", { href: "/docs/spec/introduce" }, t.design), react_1.default.createElement("a", { href: "/react/docs/start" }, t.component)),
            trigger: "click",
            getPopupContainer: function () {
                return navbarRef.current;
            },
            position: "br",
            triggerProps: {
                popupAlign: { bottom: [-12, 4] },
            },
        }, react_1.default.createElement("div", { className: navbar_module_less_1.default.menuM }, react_1.default.createElement(icon_1.IconMenu, null))))
        : react_1.default.createElement("div", { id: "navbar", className: navbar_module_less_1.default.navbar }, react_1.default.createElement("div", { className: (0, classnames_1.default)("".concat(prefixCls, "-left"), navbar_module_less_1.default.left) }, react_1.default.createElement(panel_1.default, {
            lang: lang,
            getPopupContainer: function () {
                return navbarRef.current;
            },
            isHome: isHome,
        }), react_1.default.createElement("a", {
            href: logoHref,
            className: (0, classnames_1.default)("".concat(prefixCls, "-logo"), navbar_module_less_1.default.logo),
        }, logo)), react_1.default.createElement("div", { className: navbar_module_less_1.default.right }, react_1.default.createElement("div", { className: navbar_module_less_1.default.nav, ref: navRef }, react_1.default.createElement("div", { className: navbar_module_less_1.default.navLeft }, !hideSearch &&
            react_1.default.createElement(index_2.default, {
                lang: lang,
                onClick: function () {
                    return setSearchModalVisible(true);
                },
            })), react_1.default.createElement("div", { className: navbar_module_less_1.default.navRight }, renderNavTabs ? renderNavTabs(navTabsEle) : navTabsEle, react_1.default.createElement("ul", null, !hideI18n &&
            react_1.default.createElement("li", null, react_1.default.createElement(index_1.default, {
                defaultValue: lang,
                options: [
                    { label: "简体中文", value: "zh-CN" },
                    { label: "English", value: "en-US" },
                ],
                onChange: function (v) {
                    onChangeLanguage(v);
                },
            })), react_1.default.createElement("li", null, react_1.default.createElement("a", {
            title: "GitHub",
            rel: "noreferrer",
            target: "_blank",
            href: "http://192.168.1.6:8088/m-design/m-design",
        }, react_1.default.createElement(web_react_1.Button, {
            size: "mini",
            type: "text",
            icon: react_1.default.createElement(icon_1.IconGithub, null),
            className: navbar_module_less_1.default.btnIcon,
        }))), !hideTheme &&
            theme &&
            react_1.default.createElement("li", { style: { display: "none" } }, react_1.default.createElement(index_1.default, {
                value: theme,
                options: [
                    { label: t.modeLight, value: "light" },
                    { label: t.modeDark, value: "dark" },
                    { label: t.modeSystem, value: "system" },
                ],
                onChange: function (value) {
                    onHandleTheme(value);
                    onChangeTheme && onChangeTheme(value);
                },
                button: true,
                buttonValue: theme,
                buttonIcon: getThemeIcon(),
                onClickButton: function () {
                    if (theme === "light" || theme === "dark") {
                        onHandleTheme(theme === "dark" ? "light" : "dark");
                    }
                },
            })), react_1.default.createElement("li", { style: { marginLeft: 16 } }, react_1.default.createElement(web_react_1.Trigger, {
            popup: function () {
                return react_1.default.createElement(profile_1.default, {
                    user: innerUser,
                    lang: lang,
                    defaultVersion: defaultVersion,
                    versions: versions,
                    loginHref: loginHref,
                    logoutHref: logoutHref,
                });
            },
            position: "br",
            trigger: "hover",
            classNames: "slideDynamicOrigin",
            popupAlign: { bottom: [12, 6] },
        }, react_1.default.createElement(web_react_1.Avatar, {
            className: (0, classnames_1.default)(navbar_module_less_1.default.avatar, ((_a = {}),
                (_a[navbar_module_less_1.default.avatarNotLogin] = !innerUser),
                _a)),
            size: 32,
        }, innerUser ? innerUser.username : t.needLogin)))))))), react_1.default.createElement(index_3.default, {
        visible: searchModalVisible,
        setVisible: setSearchModalVisible,
        lang: lang,
        onChangeSearchInput: onChangeSearchInput,
        queryData: queryData,
    })), react_1.default.createElement(react_transition_group_1.CSSTransition, {
        in: dropdownVisible,
        timeout: 300,
        unmountOnExit: true,
        classNames: "fadeIn",
    }, react_1.default.createElement("div", { className: navbar_module_less_1.default.mask })))));
};
exports.Navbar = Navbar;
var ForwardRefNavbar = (0, react_1.forwardRef)(exports.Navbar);
var NavbarComponent = ForwardRefNavbar;
NavbarComponent.defaultProps = {
    activeMenuItem: "components",
    logo: react_1.default.createElement(logo_svg_1.default, { width: "143px", height: "24px" }),
    versions: [],
    logoHref: "/",
    logoutHref: "/logout",
};
NavbarComponent.NavbarThemeContext = themeContext_1.NavbarThemeContext;
NavbarComponent.NavbarThemeProvider = themeContext_1.NavbarThemeProvider;
exports.default = NavbarComponent;
// npx @svgr/cli --out-dir icons -- assets
