"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavbarThemeProvider = exports.NavbarThemeContext = void 0;
var react_1 = __importStar(require("react"));
var useThemeDetector_1 = __importDefault(require("./utils/useThemeDetector"));
exports.NavbarThemeContext = (0, react_1.createContext)({});
var BODY_ATTRIBUTE_NAME = 'arco-theme';
function NavbarThemeProvider(props) {
    var children = props.children, localStorageKey = props.localStorageKey;
    var _a = (0, react_1.useState)(), theme = _a[0], setTheme = _a[1];
    var isDarkTheme = (0, useThemeDetector_1.default)();
    (0, react_1.useEffect)(function () {
        setTheme(localStorage.getItem(localStorageKey) || 'light');
    }, [localStorageKey]);
    (0, react_1.useEffect)(function () {
        if (theme === 'dark' || theme === 'light') {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            changeDarkAndLight(theme);
        }
        else if (theme === 'system') {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            changeDarkAndLight(isDarkTheme ? 'dark' : 'light');
        }
    }, [theme]);
    function changeDarkAndLight(newTheme) {
        if (newTheme === 'dark') {
            document.body.setAttribute(BODY_ATTRIBUTE_NAME, 'dark');
        }
        else if (newTheme === 'light') {
            document.body.removeAttribute(BODY_ATTRIBUTE_NAME);
        }
    }
    function onHandleTheme(newTheme) {
        setTheme(newTheme);
        localStorage.setItem(localStorageKey, newTheme);
    }
    return react_1.default.createElement(exports.NavbarThemeContext.Provider, {
        value: {
            theme: theme,
            onHandleTheme: onHandleTheme,
            realTheme: theme === 'system' ? (isDarkTheme ? 'dark' : 'light') : theme,
        },
    }, children);
}
exports.NavbarThemeProvider = NavbarThemeProvider;
NavbarThemeProvider.defaultProps = {
    localStorageKey: 'arco-theme',
};
