// @ts-nocheck
import React, { useState, useEffect, useCallback, useContext, useReducer } from 'react';
import { Modal, Link, Empty } from '@arco-design/web-react';
import { IconSearch, IconHistory, IconClose } from '@arco-design/web-react/icon';
import styles from './style/style.module.less';
import stylesHistory from './style/history.module.less';
import stylesHot from './style/hot.module.less';
import styleKeys from '../search-input/style.module.less';
import stylesList from './style/list.module.less';
import icon from '../../icon';
import components from './components';
import data from './data';
import List from './list';
import { NavbarContext } from '../../context';
import { underscored } from '../../utils/case';
import localesComponents from '../../locale';
var highlightStr = function (name, query) {
    var regex = new RegExp("(".concat(query.replace(/\\/g, '\\\\'), ")"), 'gi');
    return name.replace(regex, '<span class="highlight-word">$1</span>');
};
var locales = {
    'zh-CN': {
        component: '组件',
        ecosystem: '生态',
        noData: '暂无搜索记录',
        openSearch: '打开搜索',
        exit: '退出',
        recentSearch: '最近搜索',
        searchResult: '搜索到 {0} 个结果',
        clearAll: '清除全部',
        popularComponents: '热门组件',
        popularResource: '热门资源',
        button: '按钮 Button',
        table: '表格 Table',
        form: '表单 Form',
        select: '选择器 Select',
        'figma-component': '组件库设计资源',
        'design-lab': '风格配置平台',
        material: '物料平台',
        pro: 'ArcoDesign Pro',
    },
    'en-US': {
        component: 'Component',
        ecosystem: 'Ecosystem',
        noData: 'No search history',
        openSearch: 'Open Search',
        exit: 'Exit',
        recentSearch: 'Recent Search',
        searchResult: '{0} results found',
        clearAll: 'Clear All',
        popularComponents: 'Popular components',
        popularResource: 'Popular Resource',
        button: 'Button',
        table: 'Table',
        form: 'Form',
        select: 'Select',
        'figma-component': 'Figma of components',
        'design-lab': 'Design Lab',
        material: 'Arco Material',
        pro: 'ArcoDesign Pro',
    },
};
var popularComponents = [
    {
        name: 'button',
        url: '/react/components/button',
        svg: React.createElement(React.Fragment, null, React.createElement('span', { className: stylesHot.n }, icon.IconButtonGray), React.createElement('span', { className: stylesHot.h }, icon.IconButtonBlue)),
    },
    {
        name: 'table',
        url: '/react/components/table',
        svg: React.createElement(React.Fragment, null, React.createElement('span', { className: stylesHot.n }, icon.IconTableGray), React.createElement('span', { className: stylesHot.h }, icon.IconTableBlue)),
    },
    {
        name: 'form',
        url: '/react/components/form',
        svg: React.createElement(React.Fragment, null, React.createElement('span', { className: stylesHot.n }, icon.IconFormGray), React.createElement('span', { className: stylesHot.h }, icon.IconFormBlue)),
    },
    {
        name: 'select',
        url: '/react/components/select',
        svg: React.createElement(React.Fragment, null, React.createElement('span', { className: stylesHot.n }, icon.IconSelectGray), React.createElement('span', { className: stylesHot.h }, icon.IconSelectBlue)),
    },
];
var popularResource = [
    // {
    //   name: 'figma-component',
    //   url:
    //     'https://www.figma.com/file/M66cTiLXHa4SVyZIlfY5Pb/arco-Design-System?node-id=7945%3A44563',
    //   svg: icon.IconFigma,
    //   color: '#000',
    // },
    {
        name: 'design-lab',
        url: '/themes',
        svg: icon.IconLogoDesignLabW,
        color: '#165DFF',
    },
    {
        name: 'material',
        url: '/material',
        svg: icon.IconLogoArcoMaterialW,
        color: '#0099FF',
    },
    // {
    //   name: 'pro',
    //   url: '/pro',
    //   svg: icon.IconLogoArcoProW,
    //   color: '#165DFF',
    // },
];
function getBackgroundColor(svg) {
    var blueList = [
        'IconLogoArcoMaterialW',
        'IconLogoArcoProW',
        'IconLogoDesignLabW',
        'IconBranding',
        'IconDashboard',
        'IconCli',
    ];
    if (svg && (blueList.indexOf(svg) > -1 || !icon[svg])) {
        return '#165DFF';
    }
    return undefined;
}
function SearchModal(_a) {
    var visible = _a.visible, setVisible = _a.setVisible, _b = _a.lang, lang = _b === void 0 ? 'zh-CN' : _b, onChangeSearchInput = _a.onChangeSearchInput, _c = _a.queryData, queryData = _c === void 0 ? [] : _c;
    var _d = useReducer(function (v) {
        return v + 1;
    }, 0), forceUpdate = _d[1];
    var _e = useState(''), inputValue = _e[0], setInputValue = _e[1];
    var _f = useState([]), list = _f[0], setList = _f[1];
    var _g = useState(0), activeIndex = _g[0], setActiveIndex = _g[1];
    var goTo = useContext(NavbarContext).goTo;
    // const source = useRef<CancelTokenSource>();
    var t = locales[lang];
    var tComponents = localesComponents[lang];
    var latest = localStorage.getItem('arco-latest-search')
        ? JSON.parse(localStorage.getItem('arco-latest-search'))
        : [];
    var queryList = getQueryList(inputValue);
    var totalList = list.concat(queryList);
    var totalLength = totalList.length;
    function getExactList(inputValue) {
        var com = components
            .map(function (c) {
            return {
                label: tComponents[c],
                value: c,
            };
        })
            .filter(function (c) {
            return c.label.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;
        })
            .map(function (c) {
            return {
                key: c.value,
                type: 'component',
                svg: React.createElement(React.Fragment, null, React.createElement('div', { className: stylesList.n }, icon['Icon' + c.value + 'Gray']), React.createElement('div', { className: stylesList.h }, icon['Icon' + c.value + 'Blue'])),
                backgroundColor: getBackgroundColor('Icon' + c.value + 'Gray'),
                text: highlightStr(c.label, inputValue),
                url: '/react' + (lang === 'en-US' ? '/en-US' : '') + '/components/' + underscored(c.value),
            };
        });
        var ecosystem = data
            .filter(function (d) {
            return d.keyword.find(function (dk) {
                return dk.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;
            });
        })
            .map(function (d) {
            return __assign(__assign({}, d), {
                keyword: d.keyword.find(function (dk) {
                    return dk.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;
                }),
            });
        })
            .map(function (d) {
            return __assign(__assign({}, d), {
                svg: icon[d.svg] || icon.IconBranding,
                backgroundColor: getBackgroundColor(d.svg),
                text: highlightStr(d.keyword, inputValue),
                borderRadius: 8,
            });
        });
        return com.concat(ecosystem);
    }
    var putInStorage = useCallback(function () {
        latest.unshift(__assign(__assign({}, totalList[activeIndex]), { inputValue: inputValue }));
        latest = latest.slice(0, 10);
        localStorage.setItem('arco-latest-search', JSON.stringify(latest));
    }, [activeIndex, inputValue, totalList]);
    var onKeyDown = useCallback(function (e) {
        var newActiveIndex = activeIndex;
        if (visible) {
            if (e.key === 'ArrowDown') {
                if (activeIndex + 1 > totalLength - 1) {
                    newActiveIndex = 0;
                }
                else {
                    newActiveIndex += 1;
                }
            }
            else if (e.key === 'ArrowUp') {
                if (activeIndex - 1 < 0) {
                    newActiveIndex = totalLength - 1;
                }
                else {
                    newActiveIndex -= 1;
                }
            }
            else if (e.key === 'Enter') {
                if (totalList[activeIndex] && totalList[activeIndex].url) {
                    goTo(totalList[activeIndex].url);
                    putInStorage();
                }
            }
        }
        setActiveIndex(newActiveIndex);
    }, [visible, activeIndex, totalLength, setActiveIndex, putInStorage, totalList]);
    useEffect(function () {
        window.addEventListener('keydown', onKeyDown);
        return function () {
            window.removeEventListener('keydown', onKeyDown);
        };
    }, [onKeyDown]);
    useEffect(function () {
        if (visible) {
            setInputValue('');
        }
    }, [visible]);
    function onChangeInputValue(e) {
        var iv = e.target.value;
        setActiveIndex(0);
        setInputValue(iv);
        setList(getExactList(iv));
        onChangeSearchInput && onChangeSearchInput(iv);
    }
    function getQueryList(inputValue) {
        return queryData
            .filter(function (q) {
            return q.description.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;
        })
            .map(function (q) {
            var desc;
            var i = q.description.indexOf(inputValue);
            if (i > 50) {
                desc = q.description.slice(i - 50, i + 50);
            }
            else {
                desc = q.description.slice(0, 100);
            }
            return __assign(__assign({}, q), {
                title: q.title,
                description: highlightStr(desc, inputValue),
            });
        });
    }
    function onMouseEnterItem(index) {
        setActiveIndex(index);
    }
    function clearAllHistory() {
        localStorage.setItem('arco-latest-search', '[]');
        forceUpdate();
    }
    function onCloseHistory(e, key) {
        e.stopPropagation();
        localStorage.setItem('arco-latest-search', JSON.stringify(latest.filter(function (l) {
            return l.key !== key;
        })));
        forceUpdate();
    }
    function renderPreSearch() {
        return React.createElement('div', { className: styles.content }, latest.length
            ? React.createElement('div', { className: stylesHistory.history }, React.createElement('div', { className: stylesHistory.header }, React.createElement('div', null, t.recentSearch), React.createElement(Link, { onClick: clearAllHistory }, t.clearAll)), React.createElement('ul', { className: stylesHistory.list }, latest.map(function (l) {
                return React.createElement('li', {
                    className: stylesHistory.item,
                    onClick: function () {
                        return goTo(l.url);
                    },
                    key: l.key,
                }, React.createElement(IconHistory, null), React.createElement('span', { className: stylesHistory.title }, l.inputValue), React.createElement('span', {
                    className: "".concat(stylesHistory.close, " arco-icon-hover"),
                    onClick: function (e) {
                        return onCloseHistory(e, l.key);
                    },
                }, React.createElement(IconClose, null)));
            })))
            : null, React.createElement('div', { className: stylesHot.hot }, React.createElement('div', { className: stylesHot.half }, React.createElement('div', { className: stylesHot.title }, t.popularComponents), React.createElement('div', { className: stylesHot.list }, popularComponents.map(function (p, index) {
            return React.createElement('div', {
                className: stylesHot.item,
                onClick: function () {
                    return goTo(p.url);
                },
                key: index,
            }, React.createElement('div', { className: stylesHot.svgWrapper }, p.svg), t[p.name], React.createElement('div', { className: stylesHot.enterIcon }, icon.IconSearchIcEnter));
        }))), React.createElement('div', { className: stylesHot.half }, React.createElement('div', { className: stylesHot.title }, t.popularResource), React.createElement('div', { className: stylesHot.list }, popularResource.map(function (p, index) {
            return React.createElement('div', {
                className: stylesHot.item,
                onClick: function () {
                    return goTo(p.url, true);
                },
                key: index,
            }, React.createElement('div', {
                className: "".concat(stylesHot.svgWrapper, " ").concat(stylesHot.svgWrapperRect),
                style: { backgroundColor: p.color },
            }, p.svg), t[p.name], React.createElement('div', { className: stylesHot.enterIcon }, icon.IconSearchIcEnter));
        })))));
    }
    return React.createElement(Modal, {
        alignCenter: false,
        style: { top: 150 },
        title: null,
        visible: visible,
        onOk: function () {
            return setVisible(false);
        },
        onCancel: function () {
            return setVisible(false);
        },
        footer: null,
        closable: false,
        className: styles.modal,
        unmountOnExit: true,
    }, React.createElement('div', { className: styles.inputWrapper }, React.createElement('div', { className: styles.left }, React.createElement(IconSearch, null), React.createElement('input', {
        value: inputValue,
        onChange: onChangeInputValue,
        placeholder: 'Search',
    })), React.createElement('div', { className: styles.right }, React.createElement('div', { className: styles.keyWorld }, t.openSearch), ' ', React.createElement('div', { className: styleKeys.command }, React.createElement('div', { className: styleKeys.key }, '\u2318'), React.createElement('div', { className: styleKeys.key }, 'K')), React.createElement('div', { className: styles.keyWorld }, t.exit), React.createElement('div', { className: styleKeys.key, style: { width: 29 } }, 'ESC'))), inputValue
        ? React.createElement(React.Fragment, null, React.createElement('div', { className: styles.count }, t.searchResult.replace('{0}', list.length + queryList.length)), list.length + queryList.length > 0
            ? React.createElement(List, {
                exactList: list,
                list: queryList,
                lang: lang,
                activeIndex: activeIndex,
                onMouseEnterItem: onMouseEnterItem,
                onClickItem: putInStorage,
            })
            : React.createElement(Empty, { style: { marginBottom: 32 } }))
        : renderPreSearch());
}
export default SearchModal;
