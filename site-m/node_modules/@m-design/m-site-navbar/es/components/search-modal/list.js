var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// @ts-nocheck
import React, { useEffect, useRef, useContext } from 'react';
import cs from 'classnames';
import scrollIntoView from 'scroll-into-view-if-needed';
import styles from './style/list.module.less';
import { NavbarContext } from '../../context';
import icon from '../../icon';
var locales = {
    'zh-CN': {
        component: '组件',
        ecosystem: '生态',
    },
    'en-US': {
        component: 'Component',
        ecosystem: 'Ecosystem',
    },
};
function List(_a) {
    var _b = _a.exactList, exactList = _b === void 0 ? [] : _b, _c = _a.list, list = _c === void 0 ? [] : _c, _d = _a.lang, lang = _d === void 0 ? 'zh-CN' : _d, activeIndex = _a.activeIndex, onMouseEnterItem = _a.onMouseEnterItem, onClickItem = _a.onClickItem;
    var exactListRef = useRef(null);
    var queryListRef = useRef(null);
    var t = locales[lang];
    var goTo = useContext(NavbarContext).goTo;
    useEffect(function () {
        var allList = __spreadArray(__spreadArray([], exactListRef.current.childNodes, true), queryListRef.current.childNodes, true);
        if (allList.length) {
            scrollIntoView(allList[activeIndex], {
                scrollMode: 'if-needed',
                block: 'nearest',
                inline: 'nearest',
            });
        }
    }, [activeIndex]);
    return React.createElement('div', { className: styles.wrapper }, React.createElement('div', { className: styles.exactList, ref: exactListRef }, exactList.map(function (ex, index) {
        var _a;
        var exactStyle = { backgroundColor: ex.backgroundColor };
        if (ex.borderRadius) {
            exactStyle.borderRadius = ex.borderRadius;
        }
        return React.createElement('div', {
            className: cs(styles.exactItem, ((_a = {}), (_a[styles.itemActive] = activeIndex === index), _a)),
            key: ex.key,
            onMouseEnter: function () {
                return onMouseEnterItem(index);
            },
            onClick: function () {
                goTo(ex.url);
                onClickItem();
            },
        }, ex.svg &&
            React.createElement('div', { className: styles.exactIcon, style: exactStyle }, ex.svg), React.createElement('div', {
            className: styles.text,
            dangerouslySetInnerHTML: { __html: ex.text },
        }), React.createElement('div', { className: styles.type }, t[ex.type]), React.createElement('div', { className: styles.enterIcon }, icon.IconSearchIcEnter));
    })), React.createElement('div', { className: styles.list, ref: queryListRef }, list.map(function (l, index) {
        var _a;
        return React.createElement('div', {
            className: cs(styles.listItem, ((_a = {}), (_a[styles.itemActive] = activeIndex === index + exactList.length), _a)),
            onMouseEnter: function () {
                return onMouseEnterItem(exactList.length + index);
            },
            onClick: function () {
                goTo(l.url);
                onClickItem();
            },
            key: l.key,
        }, React.createElement('div', { className: styles.listTitle }, l.title), React.createElement('div', {
            className: styles.listDescription,
            dangerouslySetInnerHTML: { __html: l.description },
        }), React.createElement('div', { className: styles.enterIcon }, icon.IconSearchIcEnter));
    })));
}
export default List;
