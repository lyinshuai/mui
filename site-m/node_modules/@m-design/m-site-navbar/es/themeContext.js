import React, { useState, useEffect, createContext } from 'react';
import useThemeDetector from './utils/useThemeDetector';
export var NavbarThemeContext = createContext({});
var BODY_ATTRIBUTE_NAME = 'arco-theme';
export function NavbarThemeProvider(props) {
    var children = props.children, localStorageKey = props.localStorageKey;
    var _a = useState(), theme = _a[0], setTheme = _a[1];
    var isDarkTheme = useThemeDetector();
    useEffect(function () {
        setTheme(localStorage.getItem(localStorageKey) || 'light');
    }, [localStorageKey]);
    useEffect(function () {
        if (theme === 'dark' || theme === 'light') {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            changeDarkAndLight(theme);
        }
        else if (theme === 'system') {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            changeDarkAndLight(isDarkTheme ? 'dark' : 'light');
        }
    }, [theme]);
    function changeDarkAndLight(newTheme) {
        if (newTheme === 'dark') {
            document.body.setAttribute(BODY_ATTRIBUTE_NAME, 'dark');
        }
        else if (newTheme === 'light') {
            document.body.removeAttribute(BODY_ATTRIBUTE_NAME);
        }
    }
    function onHandleTheme(newTheme) {
        setTheme(newTheme);
        localStorage.setItem(localStorageKey, newTheme);
    }
    return React.createElement(NavbarThemeContext.Provider, {
        value: {
            theme: theme,
            onHandleTheme: onHandleTheme,
            realTheme: theme === 'system' ? (isDarkTheme ? 'dark' : 'light') : theme,
        },
    }, children);
}
NavbarThemeProvider.defaultProps = {
    localStorageKey: 'arco-theme',
};
