var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* eslint-disable @typescript-eslint/no-use-before-define */
// @ts-nocheck
import React, { useState, useRef, useEffect, forwardRef, useContext, } from "react";
import { CSSTransition } from "react-transition-group";
import { Button, Dropdown, Avatar, Trigger, ConfigProvider, } from "@arco-design/web-react";
import { IconSunFill, IconMoonFill, IconMenu, IconDesktop, IconGithub, } from "@arco-design/web-react/icon";
import ResizeObserver from "@arco-design/web-react/es/_util/resizeObserver";
import cs from "classnames";
import axios from "axios";
import Logo from "./logo.svg";
import NavSelect from "./components/select/index";
import SearchInput from "./components/search-input/index";
import SearchModal from "./components/search-modal/index";
import NavTabs from "./components/tabs/index";
import locale from "./locale";
import { NavbarContext } from "./context";
import { NavbarThemeContext, NavbarThemeProvider } from "./themeContext";
import Panel from "./components/panel";
import Profile from "./components/profile";
import styles from "./style/navbar.module.less";
// import { isInternal } from './utils/config';
// import '@arco-design/web-react/dist/css/arco.css';
export var Navbar = function (props, ref) {
    var _a;
    var style = props.style, className = props.className, hideSearch = props.hideSearch, hideMessageBox = props.hideMessageBox, queryData = props.queryData, logo = props.logo, history = props.history, onChangeTheme = props.onChangeTheme, versions = props.versions, defaultVersion = props.defaultVersion, logoHref = props.logoHref, loginHref = props.loginHref, logoutHref = props.logoutHref, hideI18n = true, hideTheme = true, _b = props.lang, lang = _b === void 0 ? "zh-CN" : _b, onChangeLanguage = props.onChangeLanguage, onChangeSearchInput = props.onChangeSearchInput, onDropdownVisibleChange = props.onDropdownVisibleChange, isHome = props.isHome, tabs = props.tabs, 
    // user = props.user,
    renderNavTabs = props.renderNavTabs;
    var _c = useState(false), searchModalVisible = _c[0], setSearchModalVisible = _c[1];
    var _d = useState(false), dropdownVisible = _d[0], setDropdownVisible = _d[1];
    var _e = useState(""), screen = _e[0], setScreen = _e[1];
    var navbarRef = useRef(null) || ref;
    var navRef = useRef(null);
    var outerContext = useContext(ConfigProvider.ConfigContext);
    var _f = useContext(NavbarThemeContext), theme = _f.theme, onHandleTheme = _f.onHandleTheme;
    var prefixCls = "ac-navbar";
    var t = locale[lang];
    var _g = useState(), innerUser = _g[0], setUser = _g[1];
    useEffect(function () {
        window.addEventListener("keydown", onKeyDown);
        return function () {
            window.removeEventListener("keydown", onKeyDown);
        };
    }, []);
    useEffect(function () {
        axios.post("/api/auth/userInfo").then(function (_c) {
            var data = _c.data;
            if (data.code === 0 && data.result) {
                var info = data.result;
                var user = __assign(__assign({}, info), { username: info.userDisplayName || info.loginName });
                setUser(user);
                window.user = user;
            }
            else {
                // window.location.href = loginHref;
            }
        });
    }, []);
    function onKeyDown(e) {
        if (document.activeElement === document.body) {
            if (e.key === "k" && (e.ctrlKey || e.metaKey)) {
                setTimeout(function () {
                    setSearchModalVisible(true);
                }, 10);
            }
        }
    }
    function goTo(url, blank) {
        if (blank) {
            window.open(url, "_blank");
            return;
        }
        var formatUrl = lang === "en-US" ? url.replace("/react", "/react/en-US") : url;
        if (history && url[0] === "/") {
            history.push(formatUrl);
            setSearchModalVisible(false);
        }
        else {
            window.location.pathname = formatUrl;
        }
    }
    function closeSearchModal() {
        setSearchModalVisible(false);
    }
    function updateScreen() {
        var width = navbarRef.current.clientWidth;
        if (width < 920) {
            setScreen("mobile");
        }
        else if (width >= 920) {
            setScreen("");
        }
    }
    function getThemeIcon() {
        switch (theme) {
            case "light":
                return React.createElement(IconSunFill, null);
            case "dark":
                return React.createElement(IconMoonFill, null);
            case "system":
                return React.createElement(IconDesktop, null);
            default:
        }
    }
    var navTabsEle = React.createElement(NavTabs, {
        lang: lang,
        visible: dropdownVisible,
        tabs: tabs,
        getPopupContainer: function () {
            return navbarRef.current;
        },
        onVisibleChange: function (visible) {
            onDropdownVisibleChange && onDropdownVisibleChange(visible);
            setDropdownVisible(visible);
        },
    });
    return React.createElement(ConfigProvider, Object.assign({
        getPopupContainer: function () {
            return navbarRef.current;
        },
    }, outerContext), React.createElement(ResizeObserver, { onResize: updateScreen }, React.createElement(NavbarContext.Provider, { value: { goTo: goTo, closeSearchModal: closeSearchModal } }, React.createElement("div", {
        className: screen === "mobile"
            ? styles.navbarM
            : cs(className, styles.navbarWrapper, styles[screen]),
        ref: navbarRef,
        style: style,
    }, screen === "mobile"
        ? React.createElement(React.Fragment, null, React.createElement(Panel, {
            lang: lang,
            getPopupContainer: function () {
                return navbarRef.current;
            },
            isHome: isHome,
            isMobile: true,
        }), React.createElement("a", { href: logoHref, className: styles.logoM }, logo), React.createElement(Dropdown, {
            droplist: React.createElement("div", { className: styles.menu }, React.createElement("a", { href: "/docs/spec/introduce" }, t.design), React.createElement("a", { href: "/react/docs/start" }, t.component)),
            trigger: "click",
            getPopupContainer: function () {
                return navbarRef.current;
            },
            position: "br",
            triggerProps: {
                popupAlign: { bottom: [-12, 4] },
            },
        }, React.createElement("div", { className: styles.menuM }, React.createElement(IconMenu, null))))
        : React.createElement("div", { id: "navbar", className: styles.navbar }, React.createElement("div", { className: cs("".concat(prefixCls, "-left"), styles.left) }, React.createElement(Panel, {
            lang: lang,
            getPopupContainer: function () {
                return navbarRef.current;
            },
            isHome: isHome,
        }), React.createElement("a", {
            href: logoHref,
            className: cs("".concat(prefixCls, "-logo"), styles.logo),
        }, logo)), React.createElement("div", { className: styles.right }, React.createElement("div", { className: styles.nav, ref: navRef }, React.createElement("div", { className: styles.navLeft }, !hideSearch &&
            React.createElement(SearchInput, {
                lang: lang,
                onClick: function () {
                    return setSearchModalVisible(true);
                },
            })), React.createElement("div", { className: styles.navRight }, renderNavTabs ? renderNavTabs(navTabsEle) : navTabsEle, React.createElement("ul", null, !hideI18n &&
            React.createElement("li", null, React.createElement(NavSelect, {
                defaultValue: lang,
                options: [
                    { label: "简体中文", value: "zh-CN" },
                    { label: "English", value: "en-US" },
                ],
                onChange: function (v) {
                    onChangeLanguage(v);
                },
            })), React.createElement("li", null, React.createElement("a", {
            title: "GitHub",
            rel: "noreferrer",
            target: "_blank",
            href: "http://192.168.1.6:8088/m-design/m-design",
        }, React.createElement(Button, {
            size: "mini",
            type: "text",
            icon: React.createElement(IconGithub, null),
            className: styles.btnIcon,
        }))), !hideTheme &&
            theme &&
            React.createElement("li", { style: { display: "none" } }, React.createElement(NavSelect, {
                value: theme,
                options: [
                    { label: t.modeLight, value: "light" },
                    { label: t.modeDark, value: "dark" },
                    { label: t.modeSystem, value: "system" },
                ],
                onChange: function (value) {
                    onHandleTheme(value);
                    onChangeTheme && onChangeTheme(value);
                },
                button: true,
                buttonValue: theme,
                buttonIcon: getThemeIcon(),
                onClickButton: function () {
                    if (theme === "light" || theme === "dark") {
                        onHandleTheme(theme === "dark" ? "light" : "dark");
                    }
                },
            })), React.createElement("li", { style: { marginLeft: 16 } }, React.createElement(Trigger, {
            popup: function () {
                return React.createElement(Profile, {
                    user: innerUser,
                    lang: lang,
                    defaultVersion: defaultVersion,
                    versions: versions,
                    loginHref: loginHref,
                    logoutHref: logoutHref,
                });
            },
            position: "br",
            trigger: "hover",
            classNames: "slideDynamicOrigin",
            popupAlign: { bottom: [12, 6] },
        }, React.createElement(Avatar, {
            className: cs(styles.avatar, ((_a = {}),
                (_a[styles.avatarNotLogin] = !innerUser),
                _a)),
            size: 32,
        }, innerUser ? innerUser.username : t.needLogin)))))))), React.createElement(SearchModal, {
        visible: searchModalVisible,
        setVisible: setSearchModalVisible,
        lang: lang,
        onChangeSearchInput: onChangeSearchInput,
        queryData: queryData,
    })), React.createElement(CSSTransition, {
        in: dropdownVisible,
        timeout: 300,
        unmountOnExit: true,
        classNames: "fadeIn",
    }, React.createElement("div", { className: styles.mask })))));
};
var ForwardRefNavbar = forwardRef(Navbar);
var NavbarComponent = ForwardRefNavbar;
NavbarComponent.defaultProps = {
    activeMenuItem: "components",
    logo: React.createElement(Logo, { width: "143px", height: "24px" }),
    versions: [],
    logoHref: "/",
    logoutHref: "/logout",
};
NavbarComponent.NavbarThemeContext = NavbarThemeContext;
NavbarComponent.NavbarThemeProvider = NavbarThemeProvider;
export default NavbarComponent;
// npx @svgr/cli --out-dir icons -- assets
