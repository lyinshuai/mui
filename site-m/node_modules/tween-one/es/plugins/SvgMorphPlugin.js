import _typeof from "@babel/runtime/helpers/esm/typeof";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import { interpolate } from 'flubber';

var SvgMorph = function SvgMorph(value, key) {
  var _this = this;

  _classCallCheck(this, SvgMorph);

  this.value = value;
  this.key = key;
  this.start = '';
  this.vars = {};

  this.getPointVars = function (d) {
    if (Array.isArray(d)) {
      return d;
    }

    return d.replace(/\,\s+/g, ',').split(/\s+/).map(function (item) {
      return item.split(',').map(function (_item) {
        return parseFloat(_item.replace(/[a-z]/gi, ''));
      });
    });
  };

  this.polygonPoints = function (start, end) {
    var startArray = _this.getPointVars(start);

    var endArray = _this.getPointVars(end);

    if (startArray.length !== endArray.length) {
      var t = startArray.length > endArray.length;
      var long = t ? startArray : endArray;
      var short = long === startArray ? endArray : startArray;

      for (var i = short.length; i < long.length; i++) {
        short[i] = short[short.length - 1];
      }

      return t ? [long, short] : [short, long];
    }

    return [startArray, endArray];
  };

  this.getAnimStart = function () {
    var target = _this.target,
        _this$startAt = _this.startAt,
        startAt = _this$startAt === void 0 ? {} : _this$startAt,
        key = _this.key;
    var tagName = target.tagName;

    if (startAt[key]) {
      if (_typeof(startAt[key]) === 'object') {
        _this.attr = startAt[key].attr || _this.attr;
        _this.start = startAt[key].path;
        _this.maxSegmentLength = startAt[key].maxSegmentLength;
      } else if (typeof startAt[key] === 'string') {
        _this.start = startAt[key];
      }
    } // svg 标签强制 attr 为标签的 attr;


    _this.attr = tagName === 'polygon' ? 'points' : _this.attr;
    _this.attr = tagName === 'path' ? 'd' : _this.attr;
    _this.start = _this.start || (target.getAttribute ? target.getAttribute(_this.attr) : target[_this.attr]);
    _this.start = _this.start || 'M0,0Z';

    if (tagName === 'polygon' || _this.attr === 'points') {
      _this.pointsArray = _this.polygonPoints(_this.start, _this.toPath);
    } else {
      _this.interpolator = interpolate(_this.start, _this.toPath, {
        maxSegmentLength: _this.maxSegmentLength
      });
    }

    return _this.start;
  };

  this.setArrayRatio = function (ratio, start, item, i) {
    if (typeof item === 'string') {
      return item;
    }

    var startData = start[i];
    return (item - startData) * ratio + startData;
  };

  this.render = function (r) {
    var target = _this.target;
    var tagName = target.tagName;
    var s;

    if (tagName === 'polygon' || _this.attr === 'points') {
      var start = _this.pointsArray[0];
      s = _this.pointsArray[1].map(function (item, i) {
        return item.map(function (c, ci) {
          return _this.setArrayRatio(r, start[i], c, ci);
        }).join(', ');
      }).join(' ');
    } else {
      s = _this.interpolator(r);
    }

    return {
      path: s,
      attr: _this.attr
    };
  };

  this.attr = value.attr || '';
  this.toPath = value.path;
  this.maxSegmentLength = typeof value.maxSegmentLength === 'undefined' ? 0.5 : value.maxSegmentLength;
};

export { SvgMorph as default };
SvgMorph.key = 'setAttribute';
SvgMorph.className = 'SVGMorph';