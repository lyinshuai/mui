"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _utils = require("../utils");

var _ease = _interopRequireDefault(require("./ease"));

var _ = require("../");

/**
 * Animate
 * 动画处理器
 * 滤境管理
 *
 * Animate 时间组成
 * [1.---delay---][1.---duration---][1.---repeatDelay---][2.---duration---]
 * repeatDelay 跟在时间后面；
 * 总时间 totalTime: delay + duration * (repeat + 1) + repeatDelay * repeat;
 *
 * 回调事件处理
 * repeat = 0:
 * [---delay---][---onStart(0)---][---onUpdate(duration)---][---onComplete(totalTime)---]
 * repeat = 2:
 * 1.[---delay---][---onStart(0)---][---onUpdate(duration)---][---repeatDelay---]
 * 2.[---onRepeat(0)---][---onUpdate(duration)---][---repeatDelay---]
 * 3.[---onRepeat(0)---][---onUpdate( duration)---][---onComplete(totalTime)---]
 *
 */
var Element = /*#__PURE__*/function () {
  function Element(item) {
    var _this = this;

    (0, _classCallCheck2.default)(this, Element);
    this.item = item;
    this.vars = {};
    this.startAt = {};
    this.appearTo = 0;
    this.props = {};
    this.repeatNum = 0;

    this.setEase = function (e) {
      if (typeof e === 'function') {
        _this.easing = e;
        return;
      } else if (e.match(/,/g)) {
        _this.easing = _ease.default.path(e);
        return;
      }

      _this.easing = _ease.default[e];
    };

    this.getTotalTime = function () {
      var _this$props = _this.props,
          _this$props$duration = _this$props.duration,
          duration = _this$props$duration === void 0 ? 450 : _this$props$duration,
          _this$props$delay = _this$props.delay,
          delay = _this$props$delay === void 0 ? 0 : _this$props$delay,
          _this$props$repeat = _this$props.repeat,
          repeat = _this$props$repeat === void 0 ? 0 : _this$props$repeat,
          _this$props$repeatDel = _this$props.repeatDelay,
          repeatDelay = _this$props$repeatDel === void 0 ? 0 : _this$props$repeatDel;
      return repeat === -1 ? Number.MAX_VALUE : delay + duration * (repeat + 1) + repeatDelay * repeat;
    };

    this.getEaseToRatio = function (r, isFrom) {
      var _this$props$ease = _this.props.ease,
          ease = _this$props$ease === void 0 ? '' : _this$props$ease;
      return (r === 0 || r === 1) && !(typeof ease === 'function' || ease.match(/,/g)) ? r : _this.easing(isFrom ? 1 - r : r, isFrom ? 1 : 0, isFrom ? 0 : 1, 1);
    };

    this.setRatioToVars = function (ratio) {
      var vars = _this.vars,
          root = _this.root;

      for (var i = 0; i < root.targets.length; i++) {
        if (!root.targets[i]) {
          continue;
        } // root.targets.forEach((_, i) => {


        for (var key in vars) {
          // Object.keys(vars).forEach((key: string) => {
          var _item = vars[key];

          if (_item.plugins) {
            if (key === 'PathMotion') {
              // pathMotion 的属性与 style 通用。不需新增；
              root.vars[i].style = _item.plugins[i].render(ratio);
            } else {
              root.vars[i][key] = _item.plugins[i].render(ratio);
            }

            continue;
          }

          var endVars = _item.vars,
              count = _item.count,
              unit = _item.unit;
          var startVars = _this.start[i][key];
          root.vars[i][key] = (0, _utils.getValue)(startVars, endVars, ratio, count, unit); //});
        } //});

      }
    };

    this.onRegisterAnimate = function () {
      _this.register = true;
      var root = _this.root,
          parent = _this.parent,
          startAt = _this.startAt;
      var start = [];

      for (var i = 0; i < root.targets.length; i++) {
        var target = root.targets[i];
        var s = {};

        for (var key in _this.vars) {
          var cItem = _this.vars[key];

          if (cItem.plugins) {
            var plugin = new _.Plugins[cItem.array ? 'ArrayPlugin' : key](cItem.value, key);
            plugin.target = target;
            plugin.root = root;
            plugin.parent = parent;
            plugin.targetIndex = i;
            plugin.tweenVars = root.vars[i];
            plugin.index = _this.index;
            plugin.startAt = _this.startAt;
            s[key] = plugin.getAnimStart();
            cItem.plugins.push(plugin);
          } else {
            var _ref, _startAt$key;

            var startData = (_ref = (_startAt$key = startAt[key]) !== null && _startAt$key !== void 0 ? _startAt$key : // root.vars[i][key] ??
            root.attr ? target.getAttribute(key) : target[key]) !== null && _ref !== void 0 ? _ref : (0, _utils.getDefaultStart)(key);
            var unit = "".concat(startData).replace(/[^a-z|%]/g, '');
            var varsUnit = cItem.unit;

            if (unit && unit !== varsUnit) {
              console.warn("Different units, start unit ".concat(unit, ", to value unit ").concat(varsUnit, ", remove start unit."));
            }

            s[key] = parseFloat(startData);
          }
        }

        start.push(s);
      }

      _this.start = start;
    };

    this.overflowRatio = function (ratio) {
      var r = ratio < 0 ? 0 : ratio;
      var duration = _this.props.duration;
      r = r > duration ? duration : r;
      return r;
    };

    this.render = function (_ref2) {
      var moment = _ref2.moment,
          _ref2$fps = _ref2.fps,
          fps = _ref2$fps === void 0 ? 0 : _ref2$fps,
          silence = _ref2.silence,
          render = _ref2.render;
      var parent = _this.parent,
          root = _this.root,
          props = _this.props;
      var targets = (0, _utils.flatArray)(root.targets);
      var onChange = parent.onChange;
      var _props$repeat = props.repeat,
          repeat = _props$repeat === void 0 ? 0 : _props$repeat;
      var _props$type = props.type,
          type = _props$type === void 0 ? 'to' : _props$type,
          _props$duration = props.duration,
          duration = _props$duration === void 0 ? 450 : _props$duration,
          _props$delay = props.delay,
          delay = _props$delay === void 0 ? 0 : _props$delay,
          _props$repeatDelay = props.repeatDelay,
          repeatDelay = _props$repeatDelay === void 0 ? 0 : _props$repeatDelay,
          yoyo = props.yoyo;
      repeat = repeat === -1 ? Number.MAX_VALUE : repeat;
      var ratio = moment - delay; // const totalTime = duration + delay;

      var repeatNum = Math.floor(ratio / (duration + repeatDelay)) || 0;
      repeatNum = repeatNum > repeat ? repeat : repeatNum;
      repeatNum = repeatNum < 0 ? 0 : repeatNum;
      ratio = ratio - (duration + repeatDelay) * repeatNum;
      /**
       * 反向播放 isFrom 与 yoyoReverse 的区别
       * 反向播放: isFrom
       * [---delay---][---isFrom duration---]
       * yoyo
       * [---duration---][---delay---]
       * backwards
       * 两个都为 true 时为 false;
       */

      var yoyoReverse = !!(yoyo && repeatNum % 2);
      var isFrom = type === 'from';
      var backwards = yoyoReverse && isFrom ? false : yoyoReverse || isFrom;
      ratio = backwards ? duration - ratio : ratio;
      var fromDelay = isFrom ? 0 : delay;
      var r = backwards ? 1 : 0; // 0 进入时的注册

      if (!_this.register && moment >= fromDelay) {
        _this.onRegisterAnimate(); // 时间超出当前动画时间的处理


        if (backwards && ratio <= 0 || !backwards && ratio >= duration && duration) {
          // this.mode = 'onComplete';
          _this.prevMoment = moment;
          r = backwards ? 0 : 1;
        }

        _this.setRatioToVars(r); // 初始注册，改变外部 vars;


        onChange({
          index: _this.index,
          vars: root.vars
        });
      }

      if (_this.register && moment > delay - fps && moment < _this.totalTime + fps) {
        ratio = _this.overflowRatio(ratio);
        r = backwards ? 1 : 0;

        if (moment >= _this.totalTime && _this.mode !== 'onComplete' && _this.prevMoment !== undefined || _this.prevMoment === undefined && moment >= _this.totalTime && duration) {
          r = backwards ? 0 : 1;
          _this.mode = 'onComplete';

          if (_this.props.onComplete) {
            _this.props.onComplete({
              mode: _this.mode,
              index: _this.index,
              moment: ratio,
              ratio: r,
              targets: targets,
              vars: (0, _utils.flatArray)(root.vars)
            });
          }
        } else if (_this.prevMoment === undefined || moment <= 0 && moment > -fps && _this.mode !== 'onStart' && _this.prevMoment > moment) {
          _this.mode = 'onStart';

          if (_this.props.onStart) {
            _this.props.onStart({
              mode: _this.mode,
              index: _this.index,
              moment: ratio,
              ratio: r,
              targets: targets,
              vars: (0, _utils.flatArray)(root.vars)
            });
          }
        } else {
          r = ratio / duration;
          _this.mode = 'onUpdate';

          if (_this.props.onUpdate) {
            _this.props.onUpdate({
              mode: _this.mode,
              index: _this.index,
              moment: ratio,
              ratio: r,
              targets: targets,
              vars: (0, _utils.flatArray)(root.vars)
            });
          }
        }

        if (repeat && repeatNum !== _this.repeatNum && moment && _this.mode === 'onUpdate') {
          _this.mode = 'onRepeat';

          if (_this.props.onRepeat) {
            _this.props.onRepeat({
              mode: _this.mode,
              index: _this.index,
              moment: ratio,
              ratio: r,
              targets: targets,
              vars: (0, _utils.flatArray)(_this.root.vars)
            });
          }
        }

        _this.setRatioToVars(_this.getEaseToRatio(r, isFrom));

        if (repeat) {
          _this.repeatNum = repeatNum;
        }

        var cb = {
          mode: _this.mode,
          moment: ratio,
          repeat: repeatNum,
          ratio: r,
          targets: root.targets,
          vars: root.vars,
          index: _this.index
        };

        if (silence) {
          cb.silence = silence;
        }

        if (render) {
          cb.render = render;
        }

        onChange(cb);
        _this.prevMoment = moment;
      }
    }; // delete item.appearTo;


    this.startAt = item.startAt || {}; // delete item.startAt;

    var props = {};

    for (var k in item) {
      var value = item[k];

      if (!(k in _utils.initAnimProps)) {
        var isArray = (Array.isArray(value) || k.match(/color|fill|stroke/i) || k.match(/shadow/i) || typeof value === 'string' && value.split(/[\s|,]/).length > 1) && !(k in _.Plugins);

        if (k in _.Plugins || isArray) {
          this.vars[k] = {
            value: value,
            plugins: [],
            array: isArray
          };
        } else {
          var vars = parseFloat(value.toString().replace(/=/g, ''));
          var unit = value.toString().replace(/[^a-z|%]/g, ''); // +=, -= 匹配

          var count = value.toString().charAt(1) === '=' ? value.toString().replace(/[^\+\=|\-\=]/gi, '') : '';
          var startUnit = (this.startAt[k] || 0).toString().replace(/[^a-z|%]/g, '');

          if (unit !== startUnit && this.startAt[k] && this.startAt[k] !== (0, _utils.getDefaultStart)(k)) {
            console.warn("Warning: animation vars(".concat(value, ") units(").concat(unit || 'px', ") are not equal to startAt(").concat(startUnit || 'px', ")."));
          }

          this.vars[k] = {
            vars: vars,
            unit: unit,
            count: count
          };
        }
      } else {
        props[k] = value;
      }
    }

    this.props = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _utils.initAnimProps), props);
    this.setEase(this.props.ease);
  }

  (0, _createClass2.default)(Element, [{
    key: "totalTime",
    get: function get() {
      return this.getTotalTime();
    }
  }]);
  return Element;
}();

exports.default = Element;